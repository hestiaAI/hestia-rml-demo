{"version":3,"file":"data-experience.common.5253.js","mappings":";;;;;;;;;;AAAA;AACwB;AACA;AACxB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,IAAI,6DAA6D;AACjE,sCAAsC;AACtC,WAAW,QAAQ;AACnB;AACA,aAAa,cAAc;AAC3B;AACA,yCAAY;AACZ;;AAEA,sBAAsB,wCAAW,CAAC,2CAAc;;AAEhD;;AAEA;;AAEA;;AAEA,iBAAiB,0CAAa;;AAE9B;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAqB,sCAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2CAAc;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,IAAI,0CAAa;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,4CAA4C;AACpD;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe,SAAS;AACxB,iBAAiB,qBAAqB,sBAAsB;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAAE;AACnB;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,sDAAsD;AAC9D;AACA;AACA;AACA,aAAa;AACb,eAAe,UAAU;AACzB,iBAAiB,uBAAuB,sBAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,sBAAsB,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","sources":["webpack://data-experience/./src/components/chart/view/utils/dc-axis.js"],"sourcesContent":["/* eslint-disable no-import-assign */\nimport * as d3 from 'd3'\nimport * as dc from 'dc'\n/**\n * Separate axis implementation.\n * by @ialarmedalien\n * Source / Author: https://gist.github.com/gordonwoodhull/13689975c3ec069a4e0bef380846157b\n * Examples:\n * - {@link https://bl.ocks.org/ialarmedalien/0a4bf25ffc0fb96ae569a20f91957bc1 eslint on dc.js source}\n * @class axisChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create an axis under #chart-container1 element using the default global chart group\n * var chart1 = dc.axisChart('#chart-container1');\n * // create an axis under #chart-container2 element using chart group A\n * var chart2 = dc.axisChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-selection d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.axisChart} a dc axis chart\n */\ndc.axisChart = function(parent, chartGroup) {\n  let _g\n\n  const _chart = new (dc.CapMixin(dc.MarginMixin))()\n\n  let _scale\n\n  let _elastic\n\n  let _type\n\n  let _theAxis = d3.axisBottom()\n\n  let _axisData\n\n  const validAxisTypes = ['axisBottom', 'axisTop', 'axisLeft', 'axisRight']\n\n  _chart.axisCap = _chart.cap\n\n  function calculateAxisScale() {\n    if (!_scale || _elastic) {\n      const extent = d3.extent(_axisData, d => _chart.cappedValueAccessor(d))\n      if (extent[0] > 0) {\n        extent[0] = 0\n      }\n      if (extent[1] < 0) {\n        extent[1] = 0\n      }\n      _scale = d3.scaleLinear().domain(extent)\n        .range([0, _chart.effectiveWidth()])\n    }\n    _theAxis.scale(_scale)\n  }\n\n  function drawAxis() {\n    let axisG = _g.select('g.axis')\n\n    calculateAxisScale()\n\n    if (axisG.empty()) {\n      axisG = _g.append('g').attr('class', 'axis')\n    }\n\n    dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n      .call(_theAxis)\n  }\n\n  _chart._doRender = function() {\n    _chart.resetSvg()\n\n    _g = _chart.svg()\n      .append('g')\n      .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n\n    drawChart()\n\n    return _chart\n  }\n\n  /**\n     * Gets or sets the axis type. The axis type can be any valid\n     * {@link https://github.com/d3/d3-axis d3 axis}. The default is\n     * axisBottom (a bottom axis).\n     * @method type\n     * @memberof dc.axisChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-axis d3 axis}\n     * @param {d3.type} [type]\n     * @returns {string|dc.axisChart} no args: type string; args: axis chart\n     */\n\n  _chart.type = function(type) {\n    if (!arguments.length) {\n      return _type\n    }\n    // set the axis type here\n    if (validAxisTypes.indexOf(type) !== -1) {\n      _theAxis = d3[type]()\n      _type = type\n    } else {\n      console.error(type + ' is not a valid d3 axis type')\n    }\n\n    return _chart\n  }\n\n  /**\n     * Gets or sets the axis scale. The axis scale can be any d3\n     * {@link https://github.com/d3/d3-scale quantitive scale}.\n     * @method scale\n     * @memberof dc.axisChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-scale quantitive scale}\n     * @param {d3.scale} [scale] any value d3 scale\n     * @returns {d3.scale|dc.axisChart} no args: chart scale; args: axis chart\n     */\n  _chart.scale = function(scale) {\n    if (!arguments.length) {\n      return _scale\n    }\n    _scale = scale\n    return _chart\n  }\n\n  /**\n     * Get or set the elasticity on the axis. If this attribute is set to true,\n     * then the axis will rescale to auto-fit the data range when filtered.\n     * @method elastic\n     * @memberof dc.axisChart\n     * @instance\n     * @param {Boolean} [elastic] any valid boolean\n     * @returns {Boolean|dc.axisChart} no args: boolean; args: axis chart\n     */\n  _chart.elastic = function(elastic) {\n    if (!arguments.length) {\n      return _elastic\n    }\n    _elastic = elastic\n    return _chart\n  }\n\n  /**\n     * Get the axis for the axis chart instance.\n     * See the {@link https://github.com/d3/d3-axis d3 axis object}\n     * documention for more information.\n     * @method axis\n     * @memberof dc.axisChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-axis d3.axis}\n     * @example\n     * // customize axis tick format\n     * chart.axis().tickFormat(function (v) {return v + '%';});\n     * // customize axis tick values\n     * chart.axis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.axis} d3 axis\n     */\n  _chart.axis = function() {\n    return _theAxis\n  }\n\n  function drawChart() {\n    _axisData = _chart.data()\n    drawAxis()\n  }\n\n  _chart._doRedraw = function() {\n    drawChart()\n    return _chart\n  }\n\n  return _chart.anchor(parent, chartGroup)\n}\n"],"names":[],"sourceRoot":""}