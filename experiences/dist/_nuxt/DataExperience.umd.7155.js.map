{"version":3,"file":"DataExperience.umd.7155.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,kCAAkC,OAAO,iCAAiC,YAAY,qBAAqB,wGAAwG,aAAa,qBAAqB,gBAAgB,+BAA+B,4EAA4E,KAAK,oBAAoB,QAAQ,8CAA8C,iBAAiB,wBAAwB;AACpiB;AACA;;;;;;;;;;;;;;ACwBwB;AACA;AACG;AACmC;;AAE9D;AACA,uBAAuB,CAAC,gBAAe;;AAEvC,6EAAe;AACf,gCAAgC;AAChC,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAU;AACrB,YAAY,YAAW;AACvB,aAAa,aAAY;AACzB,YAAY,YAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC,oBAAoB,UAAS;;AAE7B;AACA,MAAM,UAAS;AACf;AACA,QAAQ,YAAY;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aACS;AACpB;AACA,YAAY,mBAAkB;AAC9B,YAAY,mBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AC7KoJ,CAAC,gFAAe,wCAAG,EAAC;;;;ACA1E;AAC3B;AACL;;;AAG/D;AACA,CAA4G;AAC5G,gBAAgB,sCAAU;AAC1B,EAAE,2CAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAe;;;;;;;;;;;;;;;;AClBf,+BAA+B,6BAA6B,eAAe,sBAAsB,yEAAyE,qBAAqB,YAAY,aAAa,4DAA4D,mCAAmC,kBAAkB;AACzU;AACA;;;;;ACSA,6EAAe;;AAEf,CAAC;;;ACboJ,CAAC,qFAAe,wCAAG,EAAC;;;;ACA1E;AAC3B;AACL;;;AAG/D;AACA,CAA4G;AAC5G,gBAAgB,sCAAU;AAC1B,EAAE,gDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAe;;;;;;;;;AClBsB;AACrC;AACA,+DAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,yBAAyB,gDAAgB;AACzC;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://DataExperience/./src/components/chart/view/dc/BarTimelineChart.vue?9e85","webpack://DataExperience/src/components/chart/view/dc/BarTimelineChart.vue","webpack://DataExperience/./src/components/chart/view/dc/BarTimelineChart.vue?eab1","webpack://DataExperience/./src/components/chart/view/dc/BarTimelineChart.vue","webpack://DataExperience/./src/components/chart/view/filters/ChartViewFilters.vue?cff0","webpack://DataExperience/src/components/chart/view/filters/ChartViewFilters.vue","webpack://DataExperience/./src/components/chart/view/filters/ChartViewFilters.vue?e912","webpack://DataExperience/./src/components/chart/view/filters/ChartViewFilters.vue","webpack://DataExperience/./src/components/chart/view/dc/mixin.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('div',{attrs:{\"id\":'bar-chart-' + _vm.graphId}},[_c('div',{staticClass:\"d-flex\"},[_c('div',[_c('strong',[_vm._v(_vm._s(_vm.title))]),_c('ChartViewFilters')],1),_c('VSpacer'),_c('div',{staticStyle:{\"max-width\":\"160px\"}},[_c('VSelect',{staticClass:\"ma-0 ml-2\",attrs:{\"items\":_vm.intervalsName,\"label\":_vm.$t('Time interval'),\"hide-details\":\"\"},on:{\"change\":_vm.redraw},model:{value:(_vm.interval),callback:function ($$v) {_vm.interval=$$v},expression:\"interval\"}})],1)],1)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <VContainer>\r\n    <div :id=\"'bar-chart-' + graphId\">\r\n      <div class=\"d-flex\">\r\n        <div>\r\n          <strong>{{ title }}</strong>\r\n          <ChartViewFilters />\r\n        </div>\r\n        <VSpacer />\r\n        <div style=\"max-width: 160px\">\r\n        <VSelect\r\n          v-model=\"interval\"\r\n          :items=\"intervalsName\"\r\n          :label=\"$t('Time interval')\"\r\n          @change=\"redraw\"\r\n          class=\"ma-0 ml-2\"\r\n          hide-details\r\n        />\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </VContainer>\r\n</template>\r\n<script>\r\n\r\nimport * as d3 from 'd3'\r\nimport * as dc from 'dc'\r\nimport mixin from './mixin'\r\nimport ChartViewFilters from '../filters/ChartViewFilters.vue'\r\n\r\n// Remove warning on default colorscheme, even if not used..\r\ndc.config.defaultColors(d3.schemePaired)\r\n\r\nexport default {\r\n  components: { ChartViewFilters },\r\n  mixins: [mixin],\r\n  props: {\r\n    /**\r\n     * Column name of the {values} that represent date values\r\n     */\r\n    dateAccessor: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    /**\r\n     * Format of the dates being processed, if not set will use the Date constructor\r\n     */\r\n    dateFormat: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * The value to consider in respect to the date, if not set, will take the number of records\r\n     */\r\n    valueAccessor: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * If one of {valueAccessor} is null, replace the value with a default\r\n     */\r\n    defaultValue: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * The type of the value, if set will display a stacked bar chart\r\n     */\r\n    typeAccessor: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    const intervals = {\r\n      Day: d3.timeDay,\r\n      Week: d3.timeWeek,\r\n      Month: d3.timeMonth,\r\n      Year: d3.timeYear\r\n    }\r\n    return {\r\n      results: [],\r\n      interval: null,\r\n      intervals,\r\n      intervalsName: Object.keys(intervals),\r\n      minDate: null,\r\n      maxDate: null,\r\n      barChart: null,\r\n      dateDimension: null,\r\n      dateGroup: null\r\n    }\r\n  },\r\n  computed: {\r\n    dateParser() {\r\n      if (this.dateFormat) {\r\n        return d3.timeParse(this.dateFormat)\r\n      } else {\r\n        return d => new Date(d)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    drawViz() {\r\n      // Create and bind charts to their respective divs\r\n      this.barChart = new dc.BarChart(`#bar-chart-${this.graphId}`)\r\n      const width = d3.select(`#bar-chart-${this.graphId}`).node().getBoundingClientRect().width\r\n\r\n      // Bind reset filters links\r\n      d3.select(`#bar-chart-${this.graphId} a.reset`).on('click', function() {\r\n        this.barChart.filterAll()\r\n        dc.redrawAll()\r\n      })\r\n\r\n      // Choose the time interval to use\r\n      this.dateDimension = this.ndx.dimension(d => this.dateParser(d[this.dateAccessor]))\r\n      console.log(this.dateDimension)\r\n      this.minDate = this.dateParser(this.dateDimension.bottom(1)[0][this.dateAccessor])\r\n      this.maxDate = this.dateParser(this.dateDimension.top(1)[0][this.dateAccessor])\r\n      const diffDays = d3.timeDay.count(this.minDate, this.maxDate)\r\n      console.log(this.minDate, this.maxDate, diffDays)\r\n      if (diffDays < 100) {\r\n        this.interval = 'Day'\r\n      } else if (diffDays < 1000) {\r\n        this.interval = 'Week'\r\n      } else {\r\n        this.interval = 'Month'\r\n      }\r\n\r\n      const grouper = k => this.intervals[this.interval](k)\r\n      this.dateGroup = this.valueAccessor\r\n        ? this.dateDimension.group(grouper).reduceSum(d => d[this.valueAccessor])\r\n        : this.dateDimension.group(grouper).reduceCount()\r\n      console.log(this.interval, this.dateGroup)\r\n\r\n      // Render hour date chart\r\n      this.barChart\r\n        .width(width)\r\n        .height(this.height)\r\n        .ordinalColors([this.colorPalette[0]])\r\n        .x(d3\r\n          .scaleTime()\r\n          .domain([\r\n            d3.timeHour.offset(this.minDate, 0),\r\n            d3.timeHour.offset(this.maxDate, 2)\r\n          ]))\r\n        .xUnits(this.intervals[this.interval].range)\r\n        .margins({ left: 50, top: 20, right: 50, bottom: 20 })\r\n        .dimension(this.dateDimension)\r\n        .group(this.dateGroup)\r\n        .brushOn(false)\r\n        .elasticX(false)\r\n        .elasticY(true)\r\n        .mouseZoomable(false)\r\n        .clipPadding(10)\r\n\r\n      dc.renderAll()\r\n    },\r\n    redraw() {\r\n      const grouper = k => this.intervals[this.interval](k)\r\n      console.log(this.intervals[this.interval])\r\n      this.dateGroup = this.valueAccessor\r\n        ? this.dateDimension.group(grouper).reduceSum(d => d[this.valueAccessor])\r\n        : this.dateDimension.group(grouper).reduceCount()\r\n      this.barChart.xUnits(this.intervals[this.interval].range)\r\n      this.barChart\r\n        .dimension(this.dateDimension)\r\n        .group(this.dateGroup)\r\n      // .gap(this.selectTimeInt === 'Months' ? 10 : 0)\r\n        .transitionDuration(1000)\r\n        .render()\r\n    }\r\n  }\r\n}\r\n</script>\r\n","import mod from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BarTimelineChart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BarTimelineChart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BarTimelineChart.vue?vue&type=template&id=4a6ecdba&\"\nimport script from \"./BarTimelineChart.vue?vue&type=script&lang=js&\"\nexport * from \"./BarTimelineChart.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('p',{staticClass:\"filters\"},[_c('span',[_vm._v(\" \"+_vm._s(_vm.$t('Current filter'))+\" \"),_c('span',{staticClass:\"filter\"})]),_c('a',{directives:[{name:\"t\",rawName:\"v-t\",value:('reset'),expression:\"'reset'\"}],staticClass:\"reset\",staticStyle:{\"display\":\"none\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <p class=\"filters\">\r\n    <span>\r\n      {{ $t('Current filter') }}\r\n      <span class=\"filter\" />\r\n    </span>\r\n    <a v-t=\"'reset'\" class=\"reset\" style=\"display: none\" />\r\n  </p>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n}\r\n</script>\r\n","import mod from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewFilters.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewFilters.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewFilters.vue?vue&type=template&id=2f9280d1&\"\nimport script from \"./ChartViewFilters.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewFilters.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { TextFilterWidget } from 'dc'\r\n\r\nexport default {\r\n  props: {\r\n    /**\r\n     * The crossfilter object that contains the values and filters\r\n     * e,g: crossfilter(this.results)\r\n     */\r\n    ndx: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    /**\r\n     * Title of the graph\r\n     */\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Label to display in the axis\r\n     */\r\n    valueLabel: {\r\n      type: String,\r\n      default: 'records'\r\n    },\r\n    /**\r\n     * The height of the graph\r\n     * the width is dynamically computed from it's parent\r\n     */\r\n    height: {\r\n      type: Number,\r\n      default: 250\r\n    },\r\n    /**\r\n     * Position of the graph in the dashboard\r\n     * Determine the color to pick in colorPalette\r\n     */\r\n    position: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    /**\r\n     * Colors to use in the graph\r\n     * Default to Set 3: https://observablehq.com/@d3/color-schemes\r\n     */\r\n    colorPalette: {\r\n      type: Array,\r\n      default: () => ['#bebada', '#8dd3c7', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#bc80bd', '#ccebc5']\r\n    }\r\n    /**\r\n     '#58539E',\r\n        '#847CEB',\r\n        '#605BAB',\r\n        '#4A4685',\r\n        '#35325E'\r\n     */\r\n  },\r\n  data() {\r\n    return {\r\n      graphId: 'graph_' + this._uid\r\n    }\r\n  },\r\n  mounted() {\r\n    this.drawViz()\r\n  },\r\n  watch: {\r\n    values() {\r\n      this.drawViz()\r\n    }\r\n  },\r\n  methods: {\r\n    createTextFilterWidget(parent, placeholder = 'Search') {\r\n      const widget = new TextFilterWidget(parent)\r\n      widget.placeHolder(this.$t(placeholder))\r\n      return widget\r\n    }\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}