{"version":3,"file":"DataExperience.umd.min.1684.js","mappings":"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","sources":["webpack://DataExperience/./src/components/chart/view/ChartViewListLinkedinInference.vue?34f1","webpack://DataExperience/src/components/chart/view/ChartViewListLinkedinInference.vue","webpack://DataExperience/./src/components/chart/view/ChartViewListLinkedinInference.vue?7699","webpack://DataExperience/./src/components/chart/view/ChartViewListLinkedinInference.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('VRow',[_c('div',[_c('span',{directives:[{name:\"t\",rawName:\"v-t\",value:({ path: _vm.kViewBlock('total-inferences'), args: { n: _vm.values.length } }),expression:\"{ path: kViewBlock('total-inferences'), args: { n: values.length } }\"}],staticClass:\"overline\"}),_c('br'),(_vm.totalProfiles)?_c('span',{directives:[{name:\"t\",rawName:\"v-t\",value:({ path: _vm.kViewBlock('total-profiles'), args: { n: _vm.totalProfiles } }),expression:\"{ path: kViewBlock('total-profiles'), args: { n: totalProfiles } }\"}],staticClass:\"overline\"}):_vm._e()]),_c('VSpacer'),_c('VAutocomplete',{staticClass:\"pa-4\",attrs:{\"multiple\":\"\",\"chips\":\"\",\"dense\":\"\",\"label\":_vm.messages['Filter by Category'],\"items\":_vm.categories,\"menu-props\":{ closeOnClick: false }},scopedSlots:_vm._u([{key:\"selection\",fn:function({ item, index }){return [(index < 3)?_c('VChip',{staticClass:\"ma-1\"},[_c('span',[_vm._v(\" \"+_vm._s(item)+\" \")])]):_vm._e(),(index === 3)?_c('span',{staticClass:\"grey--text caption\"},[_vm._v(\" (\"+_vm._s(_vm.$tc('plusXOther', _vm.categoriesSelected.length - 3))+\") \")]):_vm._e()]}}]),model:{value:(_vm.categoriesSelected),callback:function ($$v) {_vm.categoriesSelected=$$v},expression:\"categoriesSelected\"}}),_c('VAutocomplete',{staticClass:\"pa-4\",attrs:{\"multiple\":\"\",\"chips\":\"\",\"dense\":\"\",\"label\":_vm.messages['Filter by Inference'],\"items\":_vm.inferenceTypes,\"menu-props\":{ closeOnClick: false }},scopedSlots:_vm._u([{key:\"selection\",fn:function({ item, index }){return [(index < 3)?_c('VChip',{staticClass:\"ma-1\"},[_c('span',[_vm._v(\" \"+_vm._s(item)+\" \")])]):_vm._e(),(index === 3)?_c('span',{staticClass:\"grey--text caption\"},[_vm._v(\" (\"+_vm._s(_vm.$tc('plusXOther', _vm.inferencesSelected.length - 3))+\") \")]):_vm._e()]}}]),model:{value:(_vm.inferencesSelected),callback:function ($$v) {_vm.inferencesSelected=$$v},expression:\"inferencesSelected\"}})],1),_c('VRow',{staticClass:\"ma-6\"},_vm._l((_vm.itemsFiltered),function(i,idx){return _c('VCol',{key:idx,attrs:{\"cols\":\"12\",\"sm\":\"6\",\"md\":\"4\",\"lg\":\"3\",\"xl\":\"2\"}},[_c('VCard',{staticClass:\"d-flex flex-column\",attrs:{\"height\":\"100%\"}},[_c('VCardTitle',{staticClass:\"d-flex flex-nowrap align-start justify-space-between\"},[_c('div',[_vm._v(_vm._s(i.typeOfInference))]),('_count' in i)?_c('div',{staticClass:\"text-center ml-2\"},[_c('div',{staticClass:\"text-subtitle-2\"},[_vm._v(_vm._s(i._count))]),_c('div',{staticClass:\"text-caption\"},[_vm._v(_vm._s(_vm.$tc('profile', i._count)))])]):_vm._e()]),_c('VCardSubtitle',[_vm._v(_vm._s(i.category))]),_c('VCardText',[_vm._v(_vm._s(i.description))]),_c('VSpacer'),_c('VCardActions',{staticClass:\"ma-3 overline d-flex justify-space-between\"},[_c('div',{domProps:{\"textContent\":_vm._s(_vm.messages['Inferred'])}}),_c('div',[_c('VAvatar',{staticClass:\"mr-1\",attrs:{\"size\":\"16\",\"color\":i.color}}),_vm._v(\" \"+_vm._s(i.inferenceText)+\" \")],1)])],1)],1)}),1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <VContainer>\n    <VRow>\n      <div>\n        <span v-t=\"{ path: kViewBlock('total-inferences'), args: { n: values.length } }\" class=\"overline\" />\n        <br>\n        <span v-if=\"totalProfiles\" v-t=\"{ path: kViewBlock('total-profiles'), args: { n: totalProfiles } }\" class=\"overline\" />\n      </div>\n      <VSpacer />\n      <VAutocomplete\n        v-model=\"categoriesSelected\"\n        multiple\n        chips\n        dense\n        class=\"pa-4\"\n        :label=\"messages['Filter by Category']\"\n        :items=\"categories\"\n        :menu-props=\"{ closeOnClick: false }\"\n      >\n        <template #selection=\"{ item, index }\">\n          <VChip v-if=\"index < 3\" class=\"ma-1\">\n            <span>\n              {{ item }}\n            </span>\n          </VChip>\n          <span v-if=\"index === 3\" class=\"grey--text caption\">\n            ({{ $tc('plusXOther', categoriesSelected.length - 3) }})\n          </span>\n        </template>\n      </VAutocomplete>\n      <VAutocomplete\n        v-model=\"inferencesSelected\"\n        multiple\n        chips\n        dense\n        class=\"pa-4\"\n        :label=\"messages['Filter by Inference']\"\n        :items=\"inferenceTypes\"\n        :menu-props=\"{ closeOnClick: false }\"\n      >\n        <template #selection=\"{ item, index }\">\n          <VChip v-if=\"index < 3\" class=\"ma-1\">\n            <span>\n              {{ item }}\n            </span>\n          </VChip>\n          <span v-if=\"index === 3\" class=\"grey--text caption\">\n            ({{ $tc('plusXOther', inferencesSelected.length - 3) }})\n          </span>\n        </template>\n      </VAutocomplete>\n    </VRow>\n    <VRow class=\"ma-6\">\n      <VCol\n        v-for=\"(i, idx) in itemsFiltered\"\n        :key=\"idx\"\n        cols=\"12\"\n        sm=\"6\"\n        md=\"4\"\n        lg=\"3\"\n        xl=\"2\"\n      >\n        <VCard height=\"100%\" class=\"d-flex flex-column\">\n          <VCardTitle class=\"d-flex flex-nowrap align-start justify-space-between\">\n            <div>{{ i.typeOfInference }}</div>\n            <div class=\"text-center ml-2\" v-if=\"'_count' in i\">\n              <div class=\"text-subtitle-2\">{{ i._count }}</div>\n              <div class=\"text-caption\">{{ $tc('profile', i._count) }}</div>\n            </div>\n          </VCardTitle>\n          <VCardSubtitle>{{ i.category }}</VCardSubtitle>\n          <VCardText>{{ i.description }}</VCardText>\n          <VSpacer />\n          <VCardActions class=\"ma-3 overline d-flex justify-space-between\">\n            <div v-text=\"messages['Inferred']\" />\n            <div>\n              <VAvatar size=\"16\" :color=\"i.color\" class=\"mr-1\" />\n              {{ i.inferenceText }}\n            </div>\n          </VCardActions>\n        </VCard>\n      </VCol>\n    </VRow>\n  </VContainer>\n</template>\n\n<script>\nimport mixin from './mixin'\nimport { TYPE_FORMATTER, TRUE_VALUES } from '@/utils/type-check'\n\nconst getColor = (v) => {\n  if (TYPE_FORMATTER.BOOLEAN.validator(v)) {\n    if (TRUE_VALUES.test(v)) {\n      // true\n      return '#29AA24'\n    }\n    // false\n    return '#E52229'\n  }\n  // other\n  return '#F2F2F2'\n}\n\nexport default {\n  mixins: [mixin],\n  props: {\n    messages: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  data() {\n    const { BOOLEAN, FLOAT } = TYPE_FORMATTER\n    const items = this.values.map(({ inference: v, category, ...rest }) => {\n      // by default, the type is 'Other' and the value is unchanged\n      let inferenceType = 'Other'\n      let inferenceText = v\n      if (BOOLEAN.validator(v)) {\n        // the boolean formatter takes care of i18n localization\n        inferenceText = BOOLEAN.formatter(v, this)\n        inferenceType = inferenceText\n      } else if (FLOAT.validator(v)) {\n        inferenceText = FLOAT.formatter(v).toFixed(2)\n        inferenceType = 'Numeric value'\n      }\n      return {\n        inference: v,\n        category: this.$tev(this.kViewBlock(category, 'categories'), category),\n        inferenceText,\n        inferenceType: this.$tev(\n          // Keys sourced from view-block dictionary\n          this.kViewBlock(inferenceType, 'inferenceTypes'),\n          // Yes/No is already translated\n          inferenceType\n        ),\n        color: getColor(v),\n        ...rest\n      }\n    })\n    return {\n      items,\n      categoriesSelected: [],\n      inferencesSelected: [],\n      categories: items.map(i => i.category),\n      inferenceTypes: items.map(i => i.inferenceType)\n    }\n  },\n  computed: {\n    totalProfiles() {\n      if (this.values.length && this.values[0]._total_profiles) {\n        return this.values[0]._total_profiles\n      } else {\n        return 0\n      }\n    },\n    itemsFiltered() {\n      const { categoriesSelected: cs, inferencesSelected: is } = this\n      return this.items\n        .filter(\n          ({ category, inferenceType }) =>\n            (\n              !cs.length ||\n              cs.includes(category)\n            ) &&\n            (\n              !is.length ||\n              is.includes(inferenceType)\n            )\n        )\n    }\n  }\n}\n</script>\n\n<style>\n.v-card__text,\n.v-card__title {\n  word-break: normal; /* maybe !important  */\n}\n</style>\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewListLinkedinInference.vue?vue&type=template&id=367b94c8&\"\nimport script from \"./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ChartViewListLinkedinInference.vue?vue&type=style&index=0&id=367b94c8&prod&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","directives","name","rawName","value","path","kViewBlock","args","n","values","length","expression","staticClass","totalProfiles","_e","attrs","messages","categories","closeOnClick","scopedSlots","_u","key","fn","item","index","_v","_s","$tc","categoriesSelected","model","callback","$$v","inferenceTypes","inferencesSelected","_l","i","idx","typeOfInference","_count","category","description","domProps","color","inferenceText","staticRenderFns","getColor","v","mixins","mixin","props","type","Object","default","data","BOOLEAN","FLOAT","items","map","inference","rest","inferenceType","validator","formatter","toFixed","$tev","computed","_total_profiles","itemsFiltered","cs","is","filter","includes","component"],"sourceRoot":""}