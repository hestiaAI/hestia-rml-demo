{"version":3,"file":"DataExperience.common.6286.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,8CAA8C,OAAO,aAAa,oCAAoC,yBAAyB,yCAAyC;AACpO;AACA;;;;;;;;;;;ACSA;AAC2B;AACsB;AAC2C;;AAE5F,6EAAe;AACf,mCAAmC;AACnC,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAiB;AACvC,oBAAoB,mCAAiB;AACrC;AACA;AACA;AACA;AACA;AACA,CAAC;;;AC/DiJ,CAAC,kFAAe,wCAAG,EAAC;;;;ACAvE;AAC3B;AACL;;;AAG/D;AACA,CAAyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,6CAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAe","sources":["webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewSession.vue?ae1a","webpack://@hestia.ai/data-experience/src/components/chart/view/ChartViewSession.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewSession.vue?7865","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewSession.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('VRow',[_c('VCol',{attrs:{\"cols\":\"12\"}},[_c('UnitFilterableTable',_vm._b({},'UnitFilterableTable',{ headers: _vm.header, items: _vm.results },false))],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <VContainer>\n    <VRow>\n      <VCol cols=\"12\">\n        <UnitFilterableTable v-bind=\"{ headers: header, items: results }\" />\n      </VCol>\n    </VRow>\n  </VContainer>\n</template>\n\n<script>\n// import * as d3 from 'd3'\nimport mixin from './mixin'\nimport { datetimeFormatter } from '@/utils/dates'\nimport UnitFilterableTable from '@/components/unit/filterable-table/UnitFilterableTable.vue'\n\nexport default {\n  components: { UnitFilterableTable },\n  mixins: [mixin],\n  props: {},\n  data() {\n    return {\n      header: [\n        { text: 'Start Date', value: 'start_date' },\n        { text: 'End Date', value: 'end_date' },\n        { text: 'Duration (s)', value: 'duration_s' },\n        { text: 'Count', value: 'nb_actions' },\n        { text: 'Actions', value: 'actions' }\n      ],\n      results: []\n    }\n  },\n  methods: {\n    drawViz() {\n      const sessions = this.values.reduce((r, o) => {\n        const currentDate = new Date(o._date).getTime()\n        const lastSession = r.at(-1) || null\n        if (!lastSession || Math.abs(lastSession.end_date - currentDate) > 60000) {\n          const session = {\n            start_date: currentDate,\n            end_date: currentDate,\n            nb_actions: 1,\n            actions: [o.actionType]\n          }\n          r.push(session)\n        } else {\n          lastSession.end_date = currentDate\n          lastSession.nb_actions += 1\n          lastSession.actions.push(o.actionType)\n        }\n        return r\n      }, [])\n      this.results = sessions.map((s) => {\n        return {\n          ...s,\n          duration_s: Math.max((s.end_date - s.start_date) / 1000, 1),\n          start_date: datetimeFormatter(s.start_date),\n          end_date: datetimeFormatter(s.end_date)\n        }\n      })\n      console.log('test', this.results)\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewSession.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewSession.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewSession.vue?vue&type=template&id=9b127676&\"\nimport script from \"./ChartViewSession.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewSession.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":[],"sourceRoot":""}