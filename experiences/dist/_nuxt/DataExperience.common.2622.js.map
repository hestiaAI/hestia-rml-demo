{"version":3,"file":"DataExperience.common.2622.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,kCAAkC,aAAa,sBAAsB,QAAQ,kBAAkB;AAC3J;AACA;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0DAAe,aAAa,EAAC;;;;;;AC/FL;AACqB;AAClB;;AAE3B,mFAAe;AACf;AACA,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,UAAS;AACf,iBAAiB,UACF;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAM;AAC7B;AACA;AACA,uBAAuB,OAAM;AAC7B;AACA;AACA,mBAAmB,eAAc;;AAEjC;AACA,yBAAyB,mBACD;AACxB;AACA;AACA,UAAU,qBAAa;AACvB;AACA;AACA;AACA,UAAU,aAAY;AACtB;AACA;AACA;AACA,yBAAyB,eAAc;AACvC,yBAAyB,iBAAgB;AACzC;AACA;AACA,UAAU,gBACe;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QACO;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;ACzOuJ,CAAC,wFAAe,8CAAG,EAAC;;;;ACAvE;AAC3B;AACL;;;AAGrE;AACA,CAAyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,mDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAAe","sources":["webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewDirectedGraph.vue?6cb7","webpack://@hestia.ai/data-experience/./node_modules/d3-force-boundary/dist/d3-force-boundary.esm.js","webpack://@hestia.ai/data-experience/src/components/chart/view/ChartViewDirectedGraph.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewDirectedGraph.vue?69c5","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewDirectedGraph.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('div',{staticStyle:{\"position\":\"relative\"},attrs:{\"id\":_vm.graphId}}),_c('div',[_c('p',[_vm._v(\" \"+_vm._s(_vm.$t('directed-graph-disclaimer'))+\" \")])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// https://observablehq.com/@john-guerra/d3-force-boundary v0.0.2 Copyright 2022 John Alexis Guerra GÃ³mez\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction forceBoundary(x0, y0, x1, y1) {\n  var strength = constant(0.1),\n      hardBoundary = true,\n      border = constant( Math.min((x1 - x0)/2, (y1 - y0)/2) ),\n      nodes,\n      strengthsX,\n      strengthsY,\n      x0z, x1z,\n      y0z, y1z,\n      borderz,\n      halfX, halfY;\n\n  if (typeof x0 !== \"function\") x0 = constant(x0 == null ? -100 : +x0);\n  if (typeof x1 !== \"function\") x1 = constant(x1 == null ? 100 : +x1);\n  if (typeof y0 !== \"function\") y0 = constant(y0 == null ? -100 : +y0);\n  if (typeof y1 !== \"function\") y1 = constant(y1 == null ? 100 : +y1);\n\n  function getVx(halfX, x, strengthX, border, alpha) {\n    return (halfX - x) *  Math.min(2, Math.abs( halfX - x) / halfX) * strengthX * alpha;\n  }\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i];\n      // debugger;\n      if ((node.x < (x0z[i] + borderz[i]) || node.x > (x1z[i] - borderz[i])) ||\n        (node.y < (y0z[i] + borderz[i]) || node.y > (y1z[i] - borderz[i]))) {\n        node.vx += getVx(halfX[i], node.x, strengthsX[i], borderz[i], alpha);\n        node.vy += getVx(halfY[i], node.y, strengthsY[i], borderz[i], alpha);\n      } else if (node.y < (y0z[i] + borderz[i]) || node.y > (y1z[i] - borderz[i])) ;\n\n      if (hardBoundary) {\n        if (node.x >= x1z[i]) node.vx += x1z[i] - node.x;\n        if (node.x <= x0z[i]) node.vx += x0z[i] - node.x;\n        if (node.y >= y1z[i]) node.vy += y1z[i] - node.y;\n        if (node.y <= y0z[i]) node.vy += y0z[i] - node.y;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengthsX = new Array(n);\n    strengthsY = new Array(n);\n    x0z = new Array(n);\n    y0z = new Array(n);\n    x1z = new Array(n);\n    y1z = new Array(n);\n    halfY = new Array(n);\n    halfX = new Array(n);\n    borderz = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      strengthsX[i] = (isNaN(x0z[i] = +x0(nodes[i], i, nodes)) ||\n        isNaN(x1z[i] = +x1(nodes[i], i, nodes))) ? 0 : +strength(nodes[i], i, nodes);\n      strengthsY[i] = (isNaN(y0z[i] = +y0(nodes[i], i, nodes)) ||\n        isNaN(y1z[i] = +y1(nodes[i], i, nodes))) ? 0 : +strength(nodes[i], i, nodes);\n      halfX[i] = x0z[i] + (x1z[i] - x0z[i])/2,\n      halfY[i] = y0z[i] + (y1z[i] - y0z[i])/2;\n      borderz[i] = +border(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x0;\n  };\n\n  force.x1 = function(_) {\n    return arguments.length ? (x1 = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x1;\n  };\n\n  force.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y0;\n  };\n\n  force.y1 = function(_) {\n    return arguments.length ? (y1 = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y1;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.border = function(_) {\n    return arguments.length ? (border = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : border;\n  };\n\n  force.hardBoundary = function(_) {\n    return arguments.length ? (hardBoundary = _, force) : hardBoundary;\n  };\n\n  return force;\n}\n\nexport default forceBoundary;\n","<template>\n  <VContainer>\n    <div :id=\"graphId\" style=\"position: relative\" />\n    <div>\n      <p>\n        {{ $t('directed-graph-disclaimer') }}\n      </p>\n    </div>\n  </VContainer>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport forceBoundary from 'd3-force-boundary' // Faire joli TODO check\nimport mixin from './mixin'\n\nexport default {\n  name: 'NetworkXGraph',\n  mixins: [mixin],\n  props: {\n    width: {\n      type: Number,\n      default: () => 900\n    },\n    height: {\n      type: Number,\n      default: () => 500\n    },\n    padding: {\n      type: Number,\n      default: () => 0\n    },\n    margin: {\n      type: Number,\n      default: () => 0\n    }\n  },\n  data() {\n    return {\n      jsonData: this.values[0].jsonData || { nodes: [], links: {} }\n    }\n  },\n  methods: {\n    drawViz() {\n      // Init of everything\n      // Init Svg container\n      d3.select('#' + this.graphId + ' svg').remove()\n      this.svg = d3\n        .select('#' + this.graphId)\n        .append('svg')\n        .attr('preserveAspectRatio', 'xMinYMin meet')\n        .attr('viewBox', '0 0 ' + this.width + ' ' + this.height)\n        .style('padding', this.padding)\n        .style('margin', this.margin)\n        .classed('svg-content', true)\n      this.updateViz()\n    },\n    updateViz() {\n      // Nodes size scale\n      const minValue = d3.min(this.jsonData.nodes, function(d) {\n        return +d.size\n      })\n      const maxValue = d3.max(this.jsonData.nodes, function(d) {\n        return +d.size\n      })\n      const size = d3.scaleLinear().domain([minValue, maxValue]).range([10, 40])\n\n      // Init simulation\n      const simulation = d3\n        .forceSimulation()\n        .force(\n          'boundary',\n          forceBoundary(30, 30, this.width - 30, this.height - 30)\n        )\n        .force(\n          'link',\n          d3.forceLink().id(function(d) {\n            return d.id\n          })\n        )\n        .force('center', d3.forceCenter(this.width / 2, this.height / 2))\n        .force('charge', d3.forceManyBody().strength(-400))\n        .force(\n          'collide',\n          d3\n            .forceCollide()\n            .radius(function(d) {\n              return 16 + size(d.size)\n            })\n            .iterations(2)\n        )\n\n      // Draw links\n      // Arrow definition\n      //      this.svg\n      //        .append('defs')\n      //        .append('marker')\n      //        .attr({\n      //          id: 'arrowhead',\n      //          viewBox: '-0 -5 10 10',\n      //          refX: 13,\n      //          refY: 0,\n      //          orient: 'auto',\n      //          markerWidth: 13,\n      //          markerHeight: 13,\n      //          xoverflow: 'visible'\n      //        })\n      //        .append('svg:path')\n      //        .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n      //        .attr('fill', '#999')\n      //        .style('stroke', 'none')\n\n      const link = this.svg\n        .append('g')\n        .attr('id', 'links')\n        .selectAll('line')\n        .data(this.jsonData.links)\n        .enter()\n        .append('line')\n        .attr('stroke-width', d => d.weight)\n        .attr('stroke', 'grey')\n        .attr('fill', 'none')\n      //        .attr('marker-end', 'url(#arrow)')\n\n      // Draw nodes\n      const node = this.svg\n        .append('g')\n        .attr('class', 'nodes')\n        .selectAll('g')\n        .data(this.jsonData.nodes)\n        .enter()\n        .append('g')\n\n      node\n        .append('circle')\n        .attr('r', d => size(d.size))\n        .attr('fill', d => d.color)\n        .attr('stroke', 'white')\n        .attr('stroke-opacity', 1)\n        .attr('stroke-width', function(d) {\n          return 0.05 * size(d.size)\n        })\n        .call(\n          d3\n            .drag()\n            .on('start', dragstarted)\n            .on('drag', dragged)\n            .on('end', dragended)\n        )\n\n      // Draw labels of nodes\n      node\n        .append('text')\n        .text(d => d.id)\n        .attr('x', 0)\n        .attr('y', 3)\n        .attr('text-anchor', 'middle')\n        .attr('text-baseline', 'middle')\n        // prevent text-selection\n        .style('user-select', 'none')\n        // prevent pointer events on text node\n        // to enable dragging the circle element\n        // when the text element is clicked\n        .style('pointer-events', 'none')\n\n      // Title for nodes\n      node.append('title').text(d => d.id)\n\n      // Start simulation\n      simulation.nodes(this.jsonData.nodes).on('tick', ticked)\n\n      simulation.force('link').links(this.jsonData.links)\n\n      function ticked() {\n        node.attr('transform', function(d) {\n          // radius = 3 + Math.sqrt(d.size)*2;\n          return 'translate(' + d.x + ',' + d.y + ')'\n        })\n\n        link\n          .attr('x1', function(d) {\n            return d.source.x\n          })\n          .attr('y1', function(d) {\n            return d.source.y\n          })\n          .attr('x2', function(d) {\n            return d.target.x\n          })\n          .attr('y2', function(d) {\n            return d.target.y\n          })\n      }\n\n      // Add Legend\n      /*\n      svg.append(\"g\")\n        .attr(\"class\", \"legend\")\n        .style(\"font-size\", \"0.5rem\")\n        .attr(\"transform\", \"translate(20,20)\");\n\n      const colorLegend = d3.legendColor()\n        .labelFormat(d3.format(\".0f\"))\n        .shape(\"path\", d3.symbol().type(d3.symbolCircle).size(150)())\n        .cells(3)\n        .title(\"\")\n        .labelWrap(40)\n        .titleWidth(60)\n        .orient(\"vertical\")\n        .scale(color)\n        .labelOffset(12);\n\n      svg.select(\".legend\")\n        .call(colorLegend);\n      */\n      function dragstarted(evt) {\n        if (!evt.active) { simulation.alphaTarget(0.3).restart() }\n        evt.subject.fx = evt.subject.x\n        evt.subject.fy = evt.subject.y\n      }\n\n      function dragged(evt) {\n        evt.subject.fx = evt.x\n        evt.subject.fy = evt.y\n      }\n\n      function dragended(evt) {\n        if (!evt.active) { simulation.alphaTarget(0) }\n        evt.subject.fx = null\n        evt.subject.fy = null\n      }\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewDirectedGraph.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewDirectedGraph.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewDirectedGraph.vue?vue&type=template&id=420d79e2&\"\nimport script from \"./ChartViewDirectedGraph.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewDirectedGraph.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":[],"sourceRoot":""}