{"version":3,"file":"DataExperience.umd.min.5225.js","mappings":"6ZASO,SAASA,EAAUC,EAAeC,GACvC,MAAMC,EAAgBF,EACnBG,MACAC,OAAO,QACPC,KAAK,QAAS,gBACdA,KAAK,cAAe,UACpBA,KAAK,IAAKL,EAAcM,QAAU,GAClCD,KAAK,IAAKL,EAAcO,SAAW,IACnCC,KAAKP,GACFQ,EAAWP,EAAcQ,OAAOC,UAChCC,EAAeZ,EAAca,UAGnCX,EACGG,KACC,IACAO,EAAaE,MACVd,EAAcM,QAAUM,EAAaE,KAAOF,EAAaG,OAAS,GAEtEV,KAAK,IAAKL,EAAcO,SAAWS,KAAKC,KAAKR,EAASF,QAAU,EACrE,CACO,SAASW,EAAUlB,EAAeC,GACvC,MAAMC,EAAgBF,EACnBG,MACAC,OAAO,QACPC,KAAK,QAAS,gBACdA,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,KAAML,EAAcO,SAAW,GACpCF,KAAK,IAAK,IACVG,KAAKP,GACFQ,EAAWP,EAAcQ,OAAOC,UAChCC,EAAeZ,EAAca,UAGnCX,EACGG,KACC,KACCO,EAAaO,KACXnB,EAAcO,SAAWK,EAAaO,IAAMP,EAAaQ,QAAU,GAEvEf,KACC,IACAW,KAAKK,IACHL,KAAKC,KAAKR,EAASF,QACnBK,EAAaE,KAAOE,KAAKC,KAAKR,EAASF,QAAU,GAGzD,CAQO,SAASe,EAAsBC,GACpC,MAAO,CACLC,MACE,MAAMC,EAAW,CAAC,EAClB,OAAOF,EAAMC,MAAME,KAAI,SAASC,GAM9B,OALIF,EAASE,EAAEC,IAAI,IACjBH,EAASE,EAAEC,IAAI,KAAOD,EAAEE,MAExBJ,EAASE,EAAEC,IAAI,IAAMD,EAAEE,MAElB,CAAED,IAAKD,EAAEC,IAAKC,MAAOJ,EAASE,EAAEC,IAAI,IAC7C,GACF,EAEJ,CAQO,SAASE,EAAgBP,GAC9B,MAAO,CACLJ,IAAIY,GACF,OAAOR,EACJJ,IAAIa,KACJC,QAAO,SAASN,GACf,OAAyB,IAAlBA,EAAEE,MAAMK,OAA2B,IAAZP,EAAEE,KAClC,IACCM,MAAM,EAAGJ,EACd,EAEJ,CAEO,SAASK,EAAiBC,GAC/BA,EAAMC,UAAU,4BAA4BC,MAAK,SAASC,GACxDA,EAAEC,MAAK,SAASd,GACd,MAAMe,EAAO,SAAUC,MACvB,IAAInC,EAAOkC,EAAKlC,OACZA,EAAKoC,OAAS,KAAMpC,EAAOA,EAAKqC,UAAU,EAAG,IAAM,OACnDrC,EAAKoC,OAAS,IAChBpC,EACEA,EACA,KACA,0BACImB,EAAEmB,SAAWnB,EAAEoB,aAAe,EAAI/B,KAAKgC,IAAO,KAElD,MAEJN,EAAKlC,KAAKA,EACZ,GACF,GACF,C","sources":["webpack://DataExperience/./src/components/chart/view/utils/dc-helpers.js"],"sourcesContent":["import * as d3 from 'd3'\nimport * as dc from 'dc'\n\n// Functions to add x-label & y-label to Row Charts (Unsupported by dc.js)\n// https://www.intothevoid.io/data-visualization/row-chart-axis-labels-dc-js/\n// Use with:\n// contentChart.on('postRender', function (chart) {\n//  addXLabel(chart, 'Hours watched')\n// })\nexport function addXLabel(chartToUpdate, displayText) {\n  const textSelection = chartToUpdate\n    .svg()\n    .append('text')\n    .attr('class', 'x-axis-label')\n    .attr('text-anchor', 'middle')\n    .attr('x', chartToUpdate.width() / 2)\n    .attr('y', chartToUpdate.height() - 10)\n    .text(displayText)\n  const textDims = textSelection.node().getBBox()\n  const chartMargins = chartToUpdate.margins()\n\n  // Dynamically adjust positioning after reading text dimension from DOM\n  textSelection\n    .attr(\n      'x',\n      chartMargins.left +\n        (chartToUpdate.width() - chartMargins.left - chartMargins.right) / 2\n    )\n    .attr('y', chartToUpdate.height() - Math.ceil(textDims.height) / 2)\n}\nexport function addYLabel(chartToUpdate, displayText) {\n  const textSelection = chartToUpdate\n    .svg()\n    .append('text')\n    .attr('class', 'y-axis-label')\n    .attr('text-anchor', 'middle')\n    .attr('transform', 'rotate(-90)')\n    .attr('x', -chartToUpdate.height() / 2)\n    .attr('y', 10)\n    .text(displayText)\n  const textDims = textSelection.node().getBBox()\n  const chartMargins = chartToUpdate.margins()\n\n  // Dynamically adjust positioning after reading text dimension from DOM\n  textSelection\n    .attr(\n      'x',\n      -chartMargins.top -\n        (chartToUpdate.height() - chartMargins.top - chartMargins.bottom) / 2\n    )\n    .attr(\n      'y',\n      Math.max(\n        Math.ceil(textDims.height),\n        chartMargins.left - Math.ceil(textDims.height) - 5\n      )\n    )\n}\n\n/**\n * Transform a simple group to a cumulative one in order\n * to make cumulative line chart\n * @param {Crossfilter group} group the group to transform\n * @returns the cumulative group\n */\nexport function createCumulativeGroup(group) {\n  return {\n    all() {\n      const cumulate = {}\n      return group.all().map(function(d) {\n        if (cumulate[d.key[0]]) {\n          cumulate[d.key[0]] += d.value\n        } else {\n          cumulate[d.key[0]] = d.value\n        }\n        return { key: d.key, value: cumulate[d.key[0]] }\n      })\n    }\n  }\n}\n\n/**\n * Remove datapoints that are null in a crossfilter group\n * Used to hide empty bins in a bar graph\n * @param {Crossfilter group} group the group to transform\n * @returns the cleaned group\n */\nexport function removeEmptyBins(group) {\n  return {\n    top(n) {\n      return group\n        .top(Infinity)\n        .filter(function(d) {\n          return d.value.count !== 0 && d.value !== 0\n        })\n        .slice(0, n)\n    }\n  }\n}\n\nexport function addPiePercentage(chart) {\n  chart.selectAll('text.pie-slice.pie-label').call(function(t) {\n    t.each(function(d) {\n      const self = d3.select(this)\n      let text = self.text()\n      if (text.length > 14) { text = text.substring(0, 14) + '.. ' }\n      if (text.length > 0) {\n        text =\n          text +\n          ' (' +\n          dc.utils.printSingleValue(\n            ((d.endAngle - d.startAngle) / (2 * Math.PI)) * 100\n          ) +\n          '%)'\n      }\n      self.text(text)\n    })\n  })\n}\n"],"names":["addXLabel","chartToUpdate","displayText","textSelection","svg","append","attr","width","height","text","textDims","node","getBBox","chartMargins","margins","left","right","Math","ceil","addYLabel","top","bottom","max","createCumulativeGroup","group","all","cumulate","map","d","key","value","removeEmptyBins","n","Infinity","filter","count","slice","addPiePercentage","chart","selectAll","call","t","each","self","this","length","substring","endAngle","startAngle","PI"],"sourceRoot":""}