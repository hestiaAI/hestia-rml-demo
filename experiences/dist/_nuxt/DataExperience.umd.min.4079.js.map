{"version":3,"file":"DataExperience.umd.min.4079.js","mappings":"kQAYO,SAASA,EACdC,EACAC,EACAC,EACAC,EACAC,EAAY,EACZC,EAAU,KACVC,EAAU,MAEV,GAAIN,EAAKO,QAAU,EAAK,MAAO,GAE/B,MAAMC,EAAS,SAAUR,GAAMS,GAAK,IAAIC,KAAKD,EAAER,MAGzCU,EAAQR,EAASS,MACT,OAAZP,EAAmBF,EAASU,MAAMR,GAAWF,EAASU,MAAML,EAAO,IACvD,OAAZF,EAAmBH,EAASW,KAAKR,GAAWH,EAASW,KAAKN,EAAO,IACjE,GAIIO,EAAeJ,EAAMK,QACzBC,IAAUjB,EAAKkB,KAAIT,GAAKA,EAAER,KAAekB,SAASF,EAAMG,cAW1D,OAPAL,EAAaM,SAASC,IACpB,MAAMC,EAAM,IAAKvB,EAAK,IACtBuB,EAAItB,GAAgBqB,EACpBC,EAAIrB,GAAiBE,EACrBJ,EAAKwB,KAAKD,EAAG,IAGRvB,CACT,C","sources":["webpack://DataExperience/./src/components/chart/view/utils/d3-helpers.js"],"sourcesContent":["import * as d3 from 'd3'\n/**\n * Fill in the missing dates of an array of dated objects with a specific value.\n * @param  {Array} data  array of objects that include dates\n * @param  {String} dateAccessor  the key of date object\n * @param  {String} valueAccessor the key of the value to add for each missing date\n * @param  {String} interval  the d3 interval between each date, e.g: d3.timeDay, d3.timeMonth\n * @param  {Any} fillValue  the value to fill for each missing date, default to 0.\n * @param  {Date} minDate  the starting date range, computed from the data by default.\n * @param  {Date} maxDate  the ending date range, computed from the data by default.\n * @return {Array} the modified data array with the missing dates and their value added\n */\nexport function addMissingDate(\n  data,\n  dateAccessor,\n  valueAccessor,\n  interval,\n  fillValue = 0,\n  minDate = null,\n  maxDate = null\n) {\n  if (data.length <= 0) { return [] }\n  // Compute the min and max date\n  const extent = d3.extent(data, d => new Date(d[dateAccessor]))\n\n  // Get the list of dates between this extent\n  const dates = interval.range(\n    minDate !== null ? interval.floor(minDate) : interval.floor(extent[0]),\n    maxDate !== null ? interval.ceil(maxDate) : interval.ceil(extent[1]),\n    1\n  )\n\n  // Get dates that are not in the above list\n  const missingDates = dates.filter(\n    value => !data.map(d => d[dateAccessor]).includes(value.toString())\n  )\n\n  // Add and fill missing dates\n  missingDates.forEach((date) => {\n    const obj = { ...data[0] }\n    obj[dateAccessor] = date\n    obj[valueAccessor] = fillValue\n    data.push(obj)\n  })\n\n  return data\n}\n"],"names":["addMissingDate","data","dateAccessor","valueAccessor","interval","fillValue","minDate","maxDate","length","extent","d","Date","dates","range","floor","ceil","missingDates","filter","value","map","includes","toString","forEach","date","obj","push"],"sourceRoot":""}