{"version":3,"file":"data-experience.umd.min.9201.js","mappings":"+ZASO,SAASA,EAAUC,EAAeC,GACvC,MAAMC,EAAgBF,EACnBG,MACAC,OAAO,QACPC,KAAK,QAAS,gBACdA,KAAK,cAAe,UACpBA,KAAK,IAAKL,EAAcM,QAAU,GAClCD,KAAK,IAAKL,EAAcO,SAAW,IACnCC,KAAKP,GACFQ,EAAWP,EAAcQ,OAAOC,UAChCC,EAAeZ,EAAca,UAGnCX,EACGG,KACC,IACAO,EAAaE,MACVd,EAAcM,QAAUM,EAAaE,KAAOF,EAAaG,OAAS,GAEtEV,KAAK,IAAKL,EAAcO,SAAWS,KAAKC,KAAKR,EAASF,QAAU,EACrE,CACO,SAASW,EAAUlB,EAAeC,GACvC,MAAMC,EAAgBF,EACnBG,MACAC,OAAO,QACPC,KAAK,QAAS,gBACdA,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,KAAML,EAAcO,SAAW,GACpCF,KAAK,IAAK,IACVG,KAAKP,GACFQ,EAAWP,EAAcQ,OAAOC,UAChCC,EAAeZ,EAAca,UAGnCX,EACGG,KACC,KACCO,EAAaO,KACXnB,EAAcO,SAAWK,EAAaO,IAAMP,EAAaQ,QAAU,GAEvEf,KACC,IACAW,KAAKK,IACHL,KAAKC,KAAKR,EAASF,QACnBK,EAAaE,KAAOE,KAAKC,KAAKR,EAASF,QAAU,GAGzD,CAQO,SAASe,EAAsBC,GACpC,MAAO,CACLC,MACE,MAAMC,EAAW,CAAC,EAClB,OAAOF,EAAMC,MAAME,KAAI,SAASC,GAM9B,OALIF,EAASE,EAAEC,IAAI,IACjBH,EAASE,EAAEC,IAAI,KAAOD,EAAEE,MAExBJ,EAASE,EAAEC,IAAI,IAAMD,EAAEE,MAElB,CAAED,IAAKD,EAAEC,IAAKC,MAAOJ,EAASE,EAAEC,IAAI,IAC7C,GACF,EAEJ,CAQO,SAASE,EAAgBP,GAC9B,MAAO,CACLJ,IAAIY,GACF,OAAOR,EACJJ,IAAIa,KACJC,QAAO,SAASN,GACf,OAAyB,IAAlBA,EAAEE,MAAMK,OAA2B,IAAZP,EAAEE,KAClC,IACCM,MAAM,EAAGJ,EACd,EAEJ,CAEO,SAASK,EAAiBC,GAC/BA,EAAMC,UAAU,4BAA4BC,MAAK,SAASC,GACxDA,EAAEC,MAAK,SAASd,GACd,MAAMe,EAAO,KAAUC,MACvB,IAAInC,EAAOkC,EAAKlC,OACZA,EAAKoC,OAAS,KAAMpC,EAAOA,EAAKqC,UAAU,EAAG,IAAM,OACnDrC,EAAKoC,OAAS,IAChBpC,EACEA,EACA,KACA,0BACImB,EAAEmB,SAAWnB,EAAEoB,aAAe,EAAI/B,KAAKgC,IAAO,KAElD,MAEJN,EAAKlC,KAAKA,EACZ,GACF,GACF,C","sources":["webpack://data-experience/./src/components/chart/view/utils/dc-helpers.js"],"sourcesContent":["import * as d3 from 'd3'\r\nimport * as dc from 'dc'\r\n\r\n// Functions to add x-label & y-label to Row Charts (Unsupported by dc.js)\r\n// https://www.intothevoid.io/data-visualization/row-chart-axis-labels-dc-js/\r\n// Use with:\r\n// contentChart.on('postRender', function (chart) {\r\n//  addXLabel(chart, 'Hours watched')\r\n// })\r\nexport function addXLabel(chartToUpdate, displayText) {\r\n  const textSelection = chartToUpdate\r\n    .svg()\r\n    .append('text')\r\n    .attr('class', 'x-axis-label')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('x', chartToUpdate.width() / 2)\r\n    .attr('y', chartToUpdate.height() - 10)\r\n    .text(displayText)\r\n  const textDims = textSelection.node().getBBox()\r\n  const chartMargins = chartToUpdate.margins()\r\n\r\n  // Dynamically adjust positioning after reading text dimension from DOM\r\n  textSelection\r\n    .attr(\r\n      'x',\r\n      chartMargins.left +\r\n        (chartToUpdate.width() - chartMargins.left - chartMargins.right) / 2\r\n    )\r\n    .attr('y', chartToUpdate.height() - Math.ceil(textDims.height) / 2)\r\n}\r\nexport function addYLabel(chartToUpdate, displayText) {\r\n  const textSelection = chartToUpdate\r\n    .svg()\r\n    .append('text')\r\n    .attr('class', 'y-axis-label')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('transform', 'rotate(-90)')\r\n    .attr('x', -chartToUpdate.height() / 2)\r\n    .attr('y', 10)\r\n    .text(displayText)\r\n  const textDims = textSelection.node().getBBox()\r\n  const chartMargins = chartToUpdate.margins()\r\n\r\n  // Dynamically adjust positioning after reading text dimension from DOM\r\n  textSelection\r\n    .attr(\r\n      'x',\r\n      -chartMargins.top -\r\n        (chartToUpdate.height() - chartMargins.top - chartMargins.bottom) / 2\r\n    )\r\n    .attr(\r\n      'y',\r\n      Math.max(\r\n        Math.ceil(textDims.height),\r\n        chartMargins.left - Math.ceil(textDims.height) - 5\r\n      )\r\n    )\r\n}\r\n\r\n/**\r\n * Transform a simple group to a cumulative one in order\r\n * to make cumulative line chart\r\n * @param {Crossfilter group} group the group to transform\r\n * @returns the cumulative group\r\n */\r\nexport function createCumulativeGroup(group) {\r\n  return {\r\n    all() {\r\n      const cumulate = {}\r\n      return group.all().map(function(d) {\r\n        if (cumulate[d.key[0]]) {\r\n          cumulate[d.key[0]] += d.value\r\n        } else {\r\n          cumulate[d.key[0]] = d.value\r\n        }\r\n        return { key: d.key, value: cumulate[d.key[0]] }\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Remove datapoints that are null in a crossfilter group\r\n * Used to hide empty bins in a bar graph\r\n * @param {Crossfilter group} group the group to transform\r\n * @returns the cleaned group\r\n */\r\nexport function removeEmptyBins(group) {\r\n  return {\r\n    top(n) {\r\n      return group\r\n        .top(Infinity)\r\n        .filter(function(d) {\r\n          return d.value.count !== 0 && d.value !== 0\r\n        })\r\n        .slice(0, n)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addPiePercentage(chart) {\r\n  chart.selectAll('text.pie-slice.pie-label').call(function(t) {\r\n    t.each(function(d) {\r\n      const self = d3.select(this)\r\n      let text = self.text()\r\n      if (text.length > 14) { text = text.substring(0, 14) + '.. ' }\r\n      if (text.length > 0) {\r\n        text =\r\n          text +\r\n          ' (' +\r\n          dc.utils.printSingleValue(\r\n            ((d.endAngle - d.startAngle) / (2 * Math.PI)) * 100\r\n          ) +\r\n          '%)'\r\n      }\r\n      self.text(text)\r\n    })\r\n  })\r\n}\r\n"],"names":["addXLabel","chartToUpdate","displayText","textSelection","svg","append","attr","width","height","text","textDims","node","getBBox","chartMargins","margins","left","right","Math","ceil","addYLabel","top","bottom","max","createCumulativeGroup","group","all","cumulate","map","d","key","value","removeEmptyBins","n","Infinity","filter","count","slice","addPiePercentage","chart","selectAll","call","t","each","self","this","length","substring","endAngle","startAngle","PI"],"sourceRoot":""}