{"version":3,"file":"DataExperience.umd.633.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,+DAA+D,iCAAiC,uBAAuB,YAAY,OAAO,kBAAkB,qBAAqB,OAAO,gCAAgC;AACpR;AACA;;;;;;;;;;;ACWwB;AACG;AACoC;;AAE/D,8EAAe;AACf,qCAAqC;AACrC,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YACd;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAY;AAC/B;AACA;AACA,6BAA6B,UACd;AACf;AACA;AACA;AACA,oBAAoB,gBAAe;AACnC;AACA,kBAAkB,OACN;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,UAAS;AACf,kBAAkB,UACH;AACfsBAAsB,eAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,aAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,aAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;ACrUkJ,CAAC,mFAAe,yCAAG,EAAC;;ACAvK;;;;;;;AEA4G;AACvC;AACL;AAChE,CAA0G;;;AAG1G;AACyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,8CAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAe;;;;;;;;;;;;;;;;ACnBf,+BAA+B,6BAA6B,yBAAyB,qBAAqB,wDAAwD,0DAA0D,aAAa,YAAY,sCAAsC,0BAA0B,OAAO,uCAAuC,KAAK,yBAAyB,gBAAgB,8DAA8D,uBAAuB,wCAAwC,uCAAuC,4BAA4B,uFAAuF,uBAAuB,qCAAqC,+BAA+B,OAAO,iBAAiB,qBAAqB,wCAAwC;AACx1B;AACA;;;;;;;;;;;;;AC0ByE;AACT;AACiC;AACvB;;AAE1E,kFAAe;AACf,0BAA0B,mDAAwB,wDAAiB;AACnE,WAAW,6CAAuB;AAClC,CAAC;;;ACpCsJ,CAAC,uFAAe,6CAAG,EAAC;;;;ACAvE;AAC3B;AACL;;;AAGpE;AACA,CAAyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,kDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAAe","sources":["webpack://DataExperience/./src/components/chart/view/ChartViewSunburst.vue?557a","webpack://DataExperience/src/components/chart/view/ChartViewSunburst.vue","webpack://DataExperience/./src/components/chart/view/ChartViewSunburst.vue?bbea","webpack://DataExperience/./src/components/chart/view/ChartViewSunburst.vue?451d","webpack://DataExperience/./src/components/chart/view/ChartViewSunburst.vue?2c15","webpack://DataExperience/./src/components/chart/view/ChartViewSunburst.vue","webpack://DataExperience/./src/components/chart/view/ChartViewVRowWebShare.vue?f831","webpack://DataExperience/src/components/chart/view/ChartViewVRowWebShare.vue","webpack://DataExperience/./src/components/chart/view/ChartViewVRowWebShare.vue?2101","webpack://DataExperience/./src/components/chart/view/ChartViewVRowWebShare.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('ChartViewVRowWebShare',[_c('VCol',{staticClass:\"text-center\",attrs:{\"cols\":\"12\",\"md\":\"12\"}},[_c('div',{attrs:{\"id\":_vm.graphId}},[_c('VBreadcrumbs',{attrs:{\"items\":_vm.bcItems,\"large\":\"\"}})],1)])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <VContainer>\r\n    <ChartViewVRowWebShare>\r\n      <VCol cols=\"12\" md=\"12\" class=\"text-center\">\r\n        <div :id=\"graphId\">\r\n          <VBreadcrumbs :items=\"bcItems\" large />\r\n        </div>\r\n      </VCol>\r\n    </ChartViewVRowWebShare>\r\n  </VContainer>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3'\r\nimport mixin from './mixin'\r\nimport ChartViewVRowWebShare from './ChartViewVRowWebShare.vue'\r\n\r\nexport default {\r\n  components: { ChartViewVRowWebShare },\r\n  mixins: [mixin],\r\n  data() {\r\n    return {\r\n      bcItems: []\r\n    }\r\n  },\r\n  watch: {\r\n    values() {\r\n      this.drawViz()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.drawViz()\r\n  },\r\n  methods: {\r\n    k(key) {\r\n      return `chart-view.sunburst.${key}`\r\n    },\r\n    drawViz() {\r\n      const { k } = this\r\n      if (!this.values || this.values.length === 0) {\r\n        return\r\n      }\r\n      // Transform list to hierarchical object\r\n      const colorDomain = []\r\n      const hierarchicalData = d3\r\n        .stratify()\r\n        .id(function(d) {\r\n          return d.id\r\n        })\r\n        .parentId(function(d) {\r\n          if (d.parent === 0) {\r\n            colorDomain.push(d.name)\r\n          }\r\n          return d.parent\r\n        })(this.values)\r\n      // Sort the hierarchical object per depth\r\n      const tree = hierarchicalData\r\n        .sum(d => d.size)\r\n        .sort((a, b) => b.value - a.value)\r\n      const totalSize = tree.value\r\n      const rootName = this.$tev(k(tree.data.name), tree.data.name)\r\n      this.bcItems = [{ text: rootName, disabled: true }]\r\n      // Compute arcs partitons/positions\r\n      const root = d3.partition().size([2 * Math.PI, tree.height + 1])(tree)\r\n      root.each(d => (d.current = d))\r\n      // Global Variables\r\n      const width = Math.min(d3\r\n        .select('#' + this.graphId)\r\n        .node()\r\n        .getBoundingClientRect().width, 600)\r\n      const radius = width / 6\r\n      const color = d3.scaleOrdinal().domain(colorDomain).range(this.colorPalette) // ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666']\r\n      // const format = d3.format(',d')\r\n      const arc = d3\r\n        .arc()\r\n        .startAngle(d => d.x0)\r\n        .endAngle(d => d.x1)\r\n        .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\r\n        .padRadius(radius * 1.5)\r\n        .innerRadius(d => d.y0 * radius)\r\n        .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\r\n      d3.select('#' + this.graphId + ' svg').remove()\r\n      const svg = d3\r\n        .select('#' + this.graphId)\r\n        .append('svg')\r\n        .attr('width', width)\r\n        .attr('height', width)\r\n        .append('g')\r\n        .attr('transform', 'translate(' + width / 2 + ',' + width / 2 + ')')\r\n      const infoLabel = svg\r\n        .append('text')\r\n        .attr('x', 0)\r\n        .attr('y', -50)\r\n        .attr('id', 'infoLabel')\r\n        .style('font-size', '1rem')\r\n        .style('font-weight', 'light')\r\n        .attr('text-anchor', 'middle')\r\n        .style('cursor', 'default')\r\n        .style('fill', 'grey')\r\n        .text('')\r\n        .attr('opacity', 0)\r\n      const clickLabel = svg\r\n        .append('text')\r\n        .attr('x', width / 2)\r\n        .attr('y', -width / 2 + 20)\r\n        .attr('id', 'infoLabel')\r\n        .style('font-size', '1rem')\r\n        .style('font-weight', 'bold')\r\n        .attr('text-anchor', 'end')\r\n        .style('cursor', 'default')\r\n        .style('fill', 'grey')\r\n        .text(this.$t(k('Click to expand')) + '!')\r\n        .attr('opacity', 0)\r\n      const infoPercent = svg\r\n        .append('text')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('id', 'infoPercent')\r\n        .attr('text-anchor', 'middle')\r\n        .style('font-size', '2.5rem')\r\n        .style('font-weight', 'bold')\r\n        .style('fill', 'grey')\r\n        .attr('font-family', 'Roboto')\r\n        .style('cursor', 'default')\r\n        .text('100%')\r\n        .attr('opacity', 0)\r\n      const infoNumber = svg\r\n        .append('text')\r\n        .attr('x', 0)\r\n        .attr('y', 30)\r\n        .attr('id', 'infoNumber')\r\n        .style('font-size', '1rem')\r\n        .style('font-weight', 'light')\r\n        .attr('text-anchor', 'middle')\r\n        .style('cursor', 'default')\r\n        .style('fill', 'grey')\r\n        .text(totalSize)\r\n        .attr('opacity', 0)\r\n      const path = svg\r\n        .append('g')\r\n        .selectAll('#' + this.graphId + ' path')\r\n        .data(root.descendants().slice(1))\r\n        .join('path')\r\n        .attr('fill', (d) => {\r\n          while (d.depth > 1) {\r\n            d = d.parent\r\n          }\r\n          return color(d.data.name)\r\n        })\r\n        .attr('fill-opacity', d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\r\n        .attr('d', d => arc(d.current))\r\n      path\r\n        .filter(d => d.children)\r\n        .style('cursor', 'pointer')\r\n        .on('click', clicked)\r\n      /*\r\n            path.append('title').text(\r\n              d =>\r\n                `${d\r\n                  .ancestors()\r\n                  .map(d => d.data.name)\r\n                  .reverse()\r\n                  .join(' / ')}\\n${format(d.value)}`\r\n            )\r\n            */\r\n      const label = svg\r\n        .append('g')\r\n        .attr('pointer-events', 'none')\r\n        .attr('text-anchor', 'middle')\r\n        .style('user-select', 'none')\r\n        .selectAll('text')\r\n        .data(root.descendants().slice(1))\r\n        .join('text')\r\n        .attr('dy', '0.35em')\r\n        .attr('fill-opacity', d => +labelVisible(d.current))\r\n        .attr('transform', d => labelTransform(d.current))\r\n        .text((d) => {\r\n          if (!d.data.name) {\r\n            return 'undefined'\r\n          }\r\n          return d.data.name.length > 10\r\n            ? d.data.name.substring(0, 10) + '..'\r\n            : d.data.name\r\n        })\r\n        .style('font-size', '0.8rem')\r\n        .style('font-weight', 'bold')\r\n        .style('fill', 'white')\r\n        .attr('font-family', 'Roboto')\r\n      const parent = svg\r\n        .append('text')\r\n        .datum(root)\r\n        .attr('x', 0)\r\n        .attr('y', 50)\r\n        .style('font-size', '1rem')\r\n        .style('font-weight', 'light')\r\n        .attr('text-anchor', 'middle')\r\n        .attr('text-decoration', 'underline')\r\n        .text(this.$t(k('Zoom out')))\r\n        .attr('opacity', 0)\r\n        .style('cursor', 'pointer')\r\n        .attr('pointer-events', 'all')\r\n        .on('click', clicked)\r\n      let currentLevel = [{ text: rootName, disabled: true }]\r\n      function clicked(event, p) {\r\n        const ancestors = getAncestors(p)\r\n        currentLevel = ancestors.map((d) => {\r\n          return {\r\n            text: d.data.name,\r\n            disabled: true\r\n          }\r\n        })\r\n        currentLevel.unshift({ text: rootName, disabled: true })\r\n        this.bcItems = currentLevel\r\n        if (!p.parent) {\r\n          parent.attr('opacity', 0)\r\n          parent.style('cursor', 'default')\r\n        } else {\r\n          parent.attr('opacity', 1)\r\n          parent.style('cursor', 'pointer')\r\n        }\r\n        parent.datum(p.parent || root)\r\n        root.each(d => (d.target = {\r\n          x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) *\r\n                        2 *\r\n                        Math.PI,\r\n          x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) *\r\n                        2 *\r\n                        Math.PI,\r\n          y0: Math.max(0, d.y0 - p.depth),\r\n          y1: Math.max(0, d.y1 - p.depth)\r\n        }))\r\n        const t = svg.transition().duration(750)\r\n        // Transition the data on all arcs, even the ones that aren’t visible,\r\n        // so that if this transition is interrupted, entering arcs will start\r\n        // the next transition from the desired position.\r\n        path\r\n          .transition(t)\r\n          .tween('data', (d) => {\r\n            const i = d3.interpolate(d.current, d.target)\r\n            return t => (d.current = i(t))\r\n          })\r\n          .filter(function(d) {\r\n            return +this.getAttribute('fill-opacity') || arcVisible(d.target)\r\n          })\r\n          .attr('fill-opacity', d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)\r\n          .attrTween('d', d => () => arc(d.current))\r\n        label\r\n          .filter(function(d) {\r\n            return +this.getAttribute('fill-opacity') || labelVisible(d.target)\r\n          })\r\n          .transition(t)\r\n          .attr('fill-opacity', d => +labelVisible(d.target))\r\n          .attrTween('transform', d => () => labelTransform(d.current))\r\n      }\r\n      function arcVisible(d) {\r\n        return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0\r\n      }\r\n      function labelVisible(d) {\r\n        return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.05\r\n      }\r\n      function labelTransform(d) {\r\n        const x = (((d.x0 + d.x1) / 2) * 180) / Math.PI\r\n        const y = ((d.y0 + d.y1) / 2) * radius\r\n        return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`\r\n      }\r\n      const mouseover = (e, d) => {\r\n        if (d.depth - currentLevel.length > 1) {\r\n          return\r\n        }\r\n        // Find all ancestors of current overred element\r\n        const ancestors = getAncestors(d)\r\n        // Update labels\r\n        const percentage = ((100 * d.value) / totalSize).toPrecision(3)\r\n        let percentageString = percentage + '%'\r\n        if (percentage < 0.1) {\r\n          percentageString = '< 0.1%'\r\n        }\r\n        infoLabel.text(d.data.name?.length > 15\r\n          ? d.data.name.slice(0, 15) + '..'\r\n          : d.data.name ?? 'undefined')\r\n        this.bcItems = ancestors.map((d) => {\r\n          return {\r\n            text: d.data.name ?? 'undefined',\r\n            disabled: true\r\n          }\r\n        })\r\n        this.bcItems.unshift({ text: rootName, disabled: true })\r\n        infoPercent.text(percentageString)\r\n        infoNumber.text(this.$t(k('infoNumber'), { number: d.value, total: totalSize }))\r\n        infoPercent.attr('opacity', 1)\r\n        infoNumber.attr('opacity', 1)\r\n        infoLabel.attr('opacity', 1)\r\n        if (currentLevel.length <= 1) {\r\n          clickLabel.attr('opacity', 1)\r\n        }\r\n        // Fade all the segments.\r\n        d3.selectAll('#' + this.graphId + ' path').style('opacity', 0.5)\r\n        // Then highlight only those that are an ancestor of the current segment.\r\n        svg\r\n          .selectAll('#' + this.graphId + ' path')\r\n          .filter(node => ancestors.includes(node))\r\n          .style('opacity', 1)\r\n      }\r\n      const mouseleave = (e, d) => {\r\n        this.bcItems = currentLevel\r\n        infoPercent.attr('opacity', 0)\r\n        infoNumber.attr('opacity', 0)\r\n        infoLabel.attr('opacity', 0)\r\n        clickLabel.attr('opacity', 0)\r\n        d3.selectAll('#' + this.graphId + ' path').style('opacity', 1)\r\n      }\r\n      // attach event actions\r\n      path.on('mouseover', mouseover)\r\n      path.on('mouseleave', mouseleave)\r\n      function getAncestors(node) {\r\n        const path = []\r\n        let current = node\r\n        while (current.parent) {\r\n          path.unshift(current)\r\n          current = current.parent\r\n        }\r\n        return path\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\nbody {\r\n  font-family: 'Roboto';\r\n  color: #22313f;\r\n}\r\n</style>\r\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewSunburst.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewSunburst.vue?vue&type=script&lang=js&\"","// extracted by mini-css-extract-plugin\nexport {};","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-54.use[0]!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-54.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-54.use[2]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewSunburst.vue?vue&type=style&index=0&id=47530e1a&prod&scoped=true&lang=css&\"","import { render, staticRenderFns } from \"./ChartViewSunburst.vue?vue&type=template&id=47530e1a&scoped=true&\"\nimport script from \"./ChartViewSunburst.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewSunburst.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ChartViewSunburst.vue?vue&type=style&index=0&id=47530e1a&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"47530e1a\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VRow',_vm._b({ref:\"domToImageNode\"},'VRow',_vm.$attrs,false),[_vm._t(\"default\"),_c('VCol',{staticClass:\"dom-to-image-exclude webshare d-flex\",attrs:{\"cols\":\"12\"}},[_c('div',{staticClass:\"webshare__export-button\"},[_c('BaseButton',_vm._b({attrs:{\"mdi-icon\":\"mdiExport\",\"text\":\"Export\"},on:{\"click\":_vm.exportImage}},'BaseButton',{ progress: _vm.progress, status: _vm.status, error: _vm.error },false))],1),_c('div',{staticClass:\"webshare__download-button\"},[_c('BaseButtonDownloadData',_vm._b({},'BaseButtonDownloadData',{ disabled: !_vm.blob, extension: _vm.extension, filename: _vm.filename, data: _vm.blob },false))],1),_c('div',{staticClass:\"webshare__share-button\"},[_c('BaseButtonShare',_vm._b({attrs:{\"file-share\":\"\"}},'BaseButtonShare',{ files: _vm.files, disabled: !_vm.files },false))],1)])],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <VRow ref=\"domToImageNode\" v-bind=\"$attrs\">\r\n      <slot />\r\n      <VCol cols=\"12\" class=\"dom-to-image-exclude webshare d-flex\">\r\n        <div class=\"webshare__export-button\">\r\n          <BaseButton\r\n            mdi-icon=\"mdiExport\"\r\n            text=\"Export\"\r\n            v-bind=\"{ progress, status, error }\"\r\n            @click=\"exportImage\"\r\n          />\r\n        </div>\r\n        <div class=\"webshare__download-button\">\r\n        <BaseButtonDownloadData\r\n          v-bind=\"{ disabled: !blob, extension, filename, data: blob }\"\r\n        />\r\n        </div>\r\n        <div class=\"webshare__share-button\">\r\n        <BaseButtonShare\r\n          file-share\r\n          v-bind=\"{ files, disabled: !files }\"\r\n        />\r\n        </div>\r\n      </VCol>\r\n    </VRow>\r\n</template>\r\n\r\n<script>\r\nimport exportImageMixinFactory from '@/mixins/export-image-mixin-factory'\r\nimport BaseButton from '@/components/base/button/BaseButton.vue'\r\nimport BaseButtonDownloadData from '@/components/base/button/download/BaseButtonDownloadData.vue'\r\nimport BaseButtonShare from '@/components/base/button/BaseButtonShare.vue'\r\n\r\nexport default {\r\n  components: { BaseButton, BaseButtonDownloadData, BaseButtonShare },\r\n  mixins: [exportImageMixinFactory()]\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewVRowWebShare.vue?vue&type=template&id=07259b63&\"\nimport script from \"./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":[],"sourceRoot":""}