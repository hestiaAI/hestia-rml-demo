{"version":3,"file":"DataExperience.umd.6061.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,mCAAmC,OAAO,YAAY,aAAa,OAAO,aAAa,YAAY,OAAO,wCAAwC,aAAa,yCAAyC,wEAAwE,uCAAuC,iCAAiC,kCAAkC,qEAAqE,OAAO,YAAY,YAAY,OAAO,oCAAoC,YAAY,aAAa,kBAAkB,aAAa,yCAAyC,+CAA+C,0BAA0B,OAAO,uBAAuB,8CAA8C,OAAO,YAAY,YAAY,OAAO,iCAAiC,aAAa,aAAa,gFAAgF,iCAAiC,0CAA0C,OAAO,YAAY,YAAY,OAAO,qCAAqC,YAAY,aAAa,kBAAkB,aAAa,aAAa,0FAA0F,iCAAiC,0BAA0B,OAAO,wBAAwB,4EAA4E,4BAA4B,0DAA0D,2CAA2C,yBAAyB,yCAAyC;AAC1oD;AACA;;;;;;;;;;;;;;;;;;;;;;;AC+CwB;AACA;AACc;AACX;AAC+B;AACwB;AACrB;AACO;AACwB;;AAE5F;AACA,uBAAuB,CAAC,gBAAe;;AAEvC,gGAAe;AACf,4CAA4C,2DAAkB,qDAAwB,wDAAqB;AAC3G,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAW;AAC5B;AACA;AACA;AACA,kBAAkB,uBAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C,6BAA6B,WAAW;AACxC,+BAA+B,WAAW;AAC1C,gCAAgC,WAAW;AAC3C,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA,MAAM,UAAS;AACf;AACA;AACA,QAAQ,YAAY;AACpB;AACA,MAAM,UAAS;AACf;AACA,QAAQ,YAAY;AACpB;AACA,MAAM,UAAS;AACf;AACA,QAAQ,YAAY;AACpB;AACA,MAAM,UAAS;AACf;AACA,QAAQ,YAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UACH;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAqB;AACpC;AACA,eAAe,kBAAiB;AAChC,WAAW,aACS;AACpB;AACA,YAAY,mBAAkB;AAC9B,YAAY,mBAAkB;AAC9B;AACA,WAAW,eAAc;AACzB;AACA;AACA;AACA,gBAAgB,YAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aACS;AACpB;AACA,YAAY,mBAAkB;AAC9B,YAAY,mBAAkB;AAC9B;AACA,eAAe,iBAAgB;AAC/B;AACA;AACA,gBAAgB,YAAW;AAC3B;AACA;AACA;AACA;AACA,cAAc,UACC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UACC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UACC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA,CAAC;;;AC5UoK,CAAC,qGAAe,2DAAG,EAAC;;;;ACAvE;AAC3B;AACL;;;AAGlF;AACA,CAAyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,gEAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,wEAAe;;;;;;;;;;;;;;;;AClBf,+BAA+B,6BAA6B,mEAAmE,OAAO,kDAAkD,sBAAsB,+BAA+B,mBAAmB,yCAAyC,sCAAsC,GAAG,YAAY,iBAAiB,6BAA6B,8CAA8C,YAAY,kBAAkB,aAAa,aAAa,wEAAwE,EAAE,eAAe,OAAO,mDAAmD,+BAA+B,0DAA0D,gBAAgB,QAAQ,oBAAoB,mBAAmB,+CAA+C,yBAAyB,GAAG,aAAa,kBAAkB,6BAA6B,8CAA8C,YAAY,kBAAkB,mCAAmC,aAAa,oEAAoE,MAAM,sBAAsB;AAChoC;AACA;;;;;;;;;AC0BwB;;AAE2B;;AAEnD,mFAAe;AACf,WAAW,2BAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB;AACA;AACA,CAAC;;;ACtD0J,CAAC,sFAAe,8CAAG,EAAC;;;;ACA1E;AAC3B;AACL;;;AAGrE;AACA,CAA4G;AAC5G,gBAAgB,sCAAU;AAC1B,EAAE,iDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAAe;;;;;;;;;;;;;;;;AClBf,+BAA+B,6BAA6B,eAAe,sBAAsB,yEAAyE,qBAAqB,YAAY,aAAa,4DAA4D,mCAAmC,kBAAkB;AACzU;AACA;;;;;ACSA,6EAAe;;AAEf,CAAC;;;ACboJ,CAAC,qFAAe,wCAAG,EAAC;;;;ACA1E;AAC3B;AACL;;;AAG/D;AACA,CAA4G;AAC5G,gBAAgB,sCAAU;AAC1B,EAAE,gDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAe;;;;;;;;;;;;;;;;AClBf,+BAA+B,6BAA6B,eAAe,yDAAyD,aAAa,UAAU,iDAAiD;AAC5M;AACA;;;;;;ACF2G;AAC3G;;;AAGA;AACA,CAA4G;AAC5G,gBAAgB,sCAAU;AAC1B;AACA,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe;;;;;;;;;;;;;;;;;ACjBS;AACA;;AAExB;AACA;AACA;AACA;AACA;AACA,IAAI;AACG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,iBAAiB;AACjB,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,mBAAmB,sCAAS;AAC5B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,UAAU,sDAAyB;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH","sources":["webpack://DataExperience/./src/components/chart/view/ChartViewOverviewLinkedinConnection.vue?6332","webpack://DataExperience/src/components/chart/view/ChartViewOverviewLinkedinConnection.vue","webpack://DataExperience/./src/components/chart/view/ChartViewOverviewLinkedinConnection.vue?f4e1","webpack://DataExperience/./src/components/chart/view/ChartViewOverviewLinkedinConnection.vue","webpack://DataExperience/./src/components/chart/view/dc/ChartViewDcFilterCount.vue?857a","webpack://DataExperience/src/components/chart/view/dc/ChartViewDcFilterCount.vue","webpack://DataExperience/./src/components/chart/view/dc/ChartViewDcFilterCount.vue?d2e0","webpack://DataExperience/./src/components/chart/view/dc/ChartViewDcFilterCount.vue","webpack://DataExperience/./src/components/chart/view/filters/ChartViewFilters.vue?cff0","webpack://DataExperience/src/components/chart/view/filters/ChartViewFilters.vue","webpack://DataExperience/./src/components/chart/view/filters/ChartViewFilters.vue?e912","webpack://DataExperience/./src/components/chart/view/filters/ChartViewFilters.vue","webpack://DataExperience/./src/components/chart/view/text/ChartViewTextSelectTimeRange.vue?13ad","webpack://DataExperience/./src/components/chart/view/text/ChartViewTextSelectTimeRange.vue","webpack://DataExperience/./src/components/chart/view/utils/dc-helpers.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('VRow',{attrs:{\"dense\":\"\"}},[_c('VCol',{attrs:{\"cols\":\"12\"}},[_c('div',{attrs:{\"id\":'connections-chart' + _vm.graphId}},[_c('span',{staticClass:\"font-weight-bold\",domProps:{\"textContent\":_vm._s(_vm.messages['Cumulative number of connections'])}}),_c('ChartViewFilters')],1),_c('div',{staticClass:\"range-chart\",attrs:{\"id\":'range-chart' + _vm.graphId}},[_c('ChartViewTextSelectTimeRange')],1)])],1),_c('VRow',[_c('VCol',{attrs:{\"cols\":\"4\"}},[_c('div',{attrs:{\"id\":'company-chart' + _vm.graphId}},[_c('div',{staticStyle:{\"display\":\"flex\"}},[_c('span',{staticClass:\"font-weight-bold\",domProps:{\"textContent\":_vm._s(_vm.messages['Company'])}}),_c('VSpacer'),_c('div',{attrs:{\"id\":\"company-search\"}})],1),_c('ChartViewFilters')],1)]),_c('VCol',{attrs:{\"cols\":\"4\"}},[_c('div',{attrs:{\"id\":'week-chart' + _vm.graphId}},[_c('span',{directives:[{name:\"t\",rawName:\"v-t\",value:(_vm.messages['Day']),expression:\"messages['Day']\"}],staticClass:\"font-weight-bold\"}),_c('ChartViewFilters')],1)]),_c('VCol',{attrs:{\"cols\":\"4\"}},[_c('div',{attrs:{\"id\":'position-chart' + _vm.graphId}},[_c('div',{staticStyle:{\"display\":\"flex\"}},[_c('span',{directives:[{name:\"t\",rawName:\"v-t\",value:(_vm.messages['Position']),expression:\"messages['Position']\"}],staticClass:\"font-weight-bold\"}),_c('VSpacer'),_c('div',{attrs:{\"id\":\"position-search\"}})],1),_c('ChartViewFilters')],1)])],1),_c('ChartViewDcFilterCount',_vm._b({},'ChartViewDcFilterCount',{ filterCount: _vm.filterCount, totalCount: _vm.totalCount },false)),_c('UnitFilterableTable',_vm._b({},'UnitFilterableTable',{ headers: _vm.header, items: _vm.results },false))],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <VContainer>\n    <VRow dense>\n      <VCol cols=\"12\">\n        <div :id=\"'connections-chart' + graphId\">\n          <span class=\"font-weight-bold\" v-text=\"messages['Cumulative number of connections']\" />\n          <ChartViewFilters />\n        </div>\n        <div :id=\"'range-chart' + graphId\" class=\"range-chart\">\n          <ChartViewTextSelectTimeRange />\n        </div>\n      </VCol>\n    </VRow>\n    <VRow>\n      <VCol cols=\"4\">\n        <div :id=\"'company-chart' + graphId\">\n          <div style=\"display: flex\">\n            <span class=\"font-weight-bold\" v-text=\"messages['Company']\" />\n            <VSpacer />\n            <div id=\"company-search\" />\n          </div>\n          <ChartViewFilters />\n        </div>\n      </VCol>\n      <VCol cols=\"4\">\n        <div :id=\"'week-chart' + graphId\">\n          <span v-t=\"messages['Day']\" class=\"font-weight-bold\" />\n          <ChartViewFilters />\n        </div>\n      </VCol>\n      <VCol cols=\"4\">\n        <div :id=\"'position-chart' + graphId\">\n          <div style=\"display: flex\">\n            <span v-t=\"messages['Position']\" class=\"font-weight-bold\" />\n            <VSpacer />\n            <div id=\"position-search\" />\n          </div>\n          <ChartViewFilters />\n        </div>\n      </VCol>\n    </VRow>\n    <ChartViewDcFilterCount\n      v-bind=\"{ filterCount, totalCount }\"\n    />\n    <UnitFilterableTable v-bind=\"{ headers: header, items: results }\" />\n  </VContainer>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport * as dc from 'dc'\nimport crossfilter from 'crossfilter2'\nimport mixin from './mixin'\nimport { createCumulativeGroup } from './utils/dc-helpers'\nimport ChartViewTextSelectTimeRange from './text/ChartViewTextSelectTimeRange.vue'\nimport ChartViewFilters from './filters/ChartViewFilters.vue'\nimport ChartViewDcFilterCount from './dc/ChartViewDcFilterCount.vue'\nimport UnitFilterableTable from '@/components/unit/filterable-table/UnitFilterableTable.vue'\n\n// Remove warning on default colorscheme, even if not used..\ndc.config.defaultColors(d3.schemePaired)\n\nexport default {\n  components: { ChartViewTextSelectTimeRange, ChartViewFilters, ChartViewDcFilterCount, UnitFilterableTable },\n  mixins: [mixin],\n  props: {\n    messages: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  data() {\n    return {\n      header: [\n        { text: 'First Name', value: 'firstname' },\n        { text: 'Last Name', value: 'lastname' },\n        { text: 'Email Address', value: 'email' },\n        { text: 'Company', value: 'company' },\n        { text: 'Position', value: 'position' },\n        { text: 'Connected On', value: 'dateStr' }\n      ],\n      results: []\n    }\n  },\n  methods: {\n    removeEmptyBins(group) {\n      return {\n        top(n) {\n          return group\n            .top(Infinity)\n            .filter(function(d) {\n              return d.value.count !== 0 && d.value !== 0\n            })\n            .slice(0, n)\n        },\n        all() {\n          return group.all()\n        }\n      }\n    },\n    drawViz() {\n      const { graphId } = this\n      /*\n      const colorPalette = [\n        '#7570b3',\n        // '#371D52',\n        // '#35334A',\n        '#6652A1',\n        '#859ED5',\n        '#CC94F2',\n        '#9A5BD9',\n        '#6F36BF',\n        '#3F1973',\n        '#58539E'\n      ]\n      */\n      // Format data to correct types 06 Oct 2021\n      const formatDate = d3.timeFormat('%B %d, %Y')\n      // Keeps only movies and tv shows (not trailer etc..)\n      this.results = this.values\n      this.results.forEach((d) => {\n        d.firstname = d.firstName\n        d.lastname = d.lastName\n        d.company = d.company || 'Unknown'\n        d.position = d.position || 'Unknown'\n        d.email = d.emailAddress\n        d.date = new Date(d.connectedOn)\n        d.week = d3.timeWeek(d.date) // pre-calculate months for better performance\n        d.dateStr = formatDate(d.date)\n      })\n      // Create crossfilter indexing\n      const ndx = crossfilter(this.results)\n      // get total number of records\n      this.totalCount = ndx.size()\n      this.filterCount = this.totalCount\n      ndx.onChange(() => {\n        // update table\n        this.results = weekDimension.top(all.value())\n        // update filter count\n        this.filterCount = ndx.allFiltered().length\n      })\n      const all = ndx.groupAll()\n      // get total number of records\n      this.totalCount = ndx.size()\n      this.filterCount = this.totalCount\n      ndx.onChange(() => {\n        // update table\n        this.results = weekDimension.top(all.value())\n        // update filter count\n        this.filterCount = ndx.allFiltered().length\n      })\n      // Create and bind charts to their respective divs\n      const connectionsChart = new dc.LineChart('#connections-chart' + graphId)\n      const rangeChart = new dc.BarChart('#range-chart' + graphId)\n      const companyChart = new dc.RowChart('#company-chart' + graphId)\n      const positionChart = new dc.RowChart('#position-chart' + graphId)\n      const weekChart = new dc.RowChart('#week-chart' + graphId)\n      const companySearch = this.createTextFilterWidget('#company-search')\n      const positionSearch = this.createTextFilterWidget('#position-search')\n      companySearch.dimension(ndx.dimension(d => d.company.toLowerCase()))\n      positionSearch.dimension(ndx.dimension(d => d.position.toLowerCase()))\n      // Bind reset filters links\n      d3.select('#connections-chart' + graphId + ' a.reset').on('click', function() {\n        rangeChart.filterAll()\n        connectionsChart.filterAll()\n        dc.redrawAll()\n      })\n      d3.select('#company-chart' + graphId + ' a.reset').on('click', function() {\n        companyChart.filterAll()\n        dc.redrawAll()\n      })\n      d3.select('#position-chart' + graphId + ' a.reset').on('click', function() {\n        positionChart.filterAll()\n        dc.redrawAll()\n      })\n      d3.select('#week-chart' + graphId + ' a.reset').on('click', function() {\n        weekChart.filterAll()\n        dc.redrawAll()\n      })\n      // Create dimensions\n      const weekDimension = ndx.dimension(d => d.week)\n      const companyDimension = ndx.dimension(d => d.company)\n      const positionDimension = ndx.dimension(d => d.position)\n      const weekDayDimension = ndx.dimension((d) => {\n        const day = d.date.getDay()\n        const name = this.$days()\n        return `${name[day]}`\n      })\n      // Create groups from dimension\n      const weekGroup = weekDimension.group().reduceCount()\n      // const typeGroup = typeDimension.group().reduceSum(d => d.duration)\n      const companyGroup = companyDimension.group().reduceCount()\n      const positionGroup = positionDimension.group().reduceCount()\n      const weekDayGroup = weekDayDimension.group().reduceCount()\n      // Render watch time line chart\n      const minDate = weekDimension.bottom(1)[0].date\n      const maxDate = weekDimension.top(1)[0].date\n      const maxValue = weekGroup.top(1)[0].value + 2\n      let width = d3\n        .select('#connections-chart' + graphId)\n        .node()\n        .getBoundingClientRect().width\n      let height = 150\n      connectionsChart\n        .renderArea(true)\n        .width(width)\n        .height(height)\n        .transitionDuration(1000)\n        .margins({ top: 25, right: 25, bottom: 25, left: 40 })\n        .group(createCumulativeGroup(weekGroup))\n        .dimension(weekDimension)\n        .curve(d3.curveMonotoneX)\n        .x(d3\n          .scaleTime()\n          .domain([\n            d3.timeHour.offset(minDate, 0),\n            d3.timeHour.offset(maxDate, 2)\n          ]))\n        .y(d3.scaleLinear().domain([0, maxValue]))\n        .ordinalColors([this.colorPalette[0]])\n        .valueAccessor(d => d.value)\n        .title(d => formatDate(d.key) + ': ' + d.value + ' connections made')\n        .xUnits(d3.timeHour)\n        .brushOn(false)\n        .elasticX(false)\n        .elasticY(true)\n        .xyTipsOn(true)\n        .mouseZoomable(false)\n        .rangeChart(rangeChart)\n        .renderHorizontalGridLines(false)\n      // .dashStyle([3,1,1,1])\n        .renderDataPoints({\n          radius: 3,\n          fillOpacity: 0.8,\n          strokeOpacity: 0\n        })\n        .yAxisLabel('Connections')\n        .clipPadding(110)\n      // .xAxisLabel(\"Date\")\n        .yAxis()\n        .ticks(5)\n      connectionsChart.xAxis().ticks(5)\n      // range chart date picker\n      rangeChart\n        .width(width)\n        .height(30)\n        .margins({ top: 0, right: 25, bottom: 20, left: 25 })\n        .dimension(weekDimension)\n        .group(weekGroup)\n        .centerBar(true)\n        .elasticY(true)\n        .gap(1)\n        .x(d3\n          .scaleTime()\n          .domain([\n            d3.timeHour.offset(minDate, 0),\n            d3.timeHour.offset(maxDate, 2)\n          ]))\n        .round(d3.timeDay.round)\n        .valueAccessor(d => d.value)\n        .alwaysUseRounding(true)\n        .xUnits(d3.timeDays)\n        .ordinalColors([this.colorPalette[0]])\n        .yAxis()\n        .ticks(0)\n      // Render company row chart\n      width = d3\n        .select('#company-chart' + graphId)\n        .node()\n        .getBoundingClientRect().width\n      height = 400\n      companyChart\n        .width(width)\n        .height(height)\n        .margins({ top: 25, left: 25, right: 25, bottom: 25 })\n        .group(companyGroup)\n        .dimension(companyDimension)\n        .ordinalColors([this.colorPalette[1]])\n        .valueAccessor(d => d.value)\n        .label(d => d.key)\n        .data(group => group.top(20))\n        // .labelOffsetX(0)\n        .title(d => d.key + ': ' + d.value + ' connections made')\n        .elasticX(true)\n        .xAxis()\n        .ticks(4)\n      // Render day of week row chart\n      width = d3\n        .select('#week-chart' + graphId)\n        .node()\n        .getBoundingClientRect().width\n      height = 400\n      weekChart\n        .width(width)\n        .height(height)\n        .margins({ top: 25, left: 25, right: 25, bottom: 25 })\n        .group(weekDayGroup)\n        .dimension(weekDayDimension)\n        .valueAccessor(d => d.value)\n        .ordinalColors(this.colorPalette)\n        .label(d => d.key)\n        .title(d => d.value + ' connections')\n        .elasticX(true)\n        .xAxis()\n        .ticks(4)\n      weekChart.ordering(d => this.$days().indexOf(d.key))\n      // Render content row chart\n      width = d3\n        .select('#position-chart' + graphId)\n        .node()\n        .getBoundingClientRect().width\n      height = 400\n      positionChart\n        .width(width)\n        .height(height)\n        .margins({ top: 25, left: 25, right: 25, bottom: 25 })\n        .group(positionGroup)\n        .dimension(positionDimension)\n        .ordinalColors([this.colorPalette[2]])\n        .valueAccessor(d => d.value)\n        .title(d => d.key + ': ' + d.value + ' connections')\n        .label(d => d.key)\n        .data(group => group.top(20))\n      // .labelOffsetX(0)\n        .elasticX(true)\n        .xAxis()\n        .ticks(4)\n      dc.renderAll()\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewOverviewLinkedinConnection.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewOverviewLinkedinConnection.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewOverviewLinkedinConnection.vue?vue&type=template&id=556a25e0&\"\nimport script from \"./ChartViewOverviewLinkedinConnection.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewOverviewLinkedinConnection.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VRow',[(_vm.filterCount === _vm.totalCount)?[_c('i18n',{attrs:{\"tag\":\"div\",\"path\":_vm.kViewBlock('selected-all')},scopedSlots:_vm._u([{key:\"totalCount\",fn:function(){return [_c('span',{staticClass:\"font-weight-bold\",domProps:{\"textContent\":_vm._s(_vm.totalCount)}})]},proxy:true},(_vm.rowLabel)?{key:\"rowLabel\",fn:function(){return [_vm._v(\" \"+_vm._s(_vm.rowLabel)+\" \")]},proxy:true}:null],null,true)}),_c('span',{directives:[{name:\"t\",rawName:\"v-t\",value:('click-graph'),expression:\"'click-graph'\"}]})]:[_c('i18n',{attrs:{\"tag\":\"div\",\"path\":_vm.kViewBlock('selected-some')},scopedSlots:_vm._u([_vm._l(({ filterCount: _vm.filterCount, totalCount: _vm.totalCount }),function(v,k){return {key:k,fn:function(){return [_c('span',{key:k,staticClass:\"font-weight-bold\",domProps:{\"textContent\":_vm._s(v)}})]},proxy:true}}),(_vm.rowLabel)?{key:\"rowLabel\",fn:function(){return [_vm._v(\" \"+_vm._s(_vm.rowLabel)+\" \")]},proxy:true}:null],null,true)}),_c('span',[_vm._v(\" | \"),_c('a',{directives:[{name:\"t\",rawName:\"v-t\",value:('Reset All'),expression:\"'Reset All'\"}],on:{\"click\":_vm.resetAll}})])]],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <VRow>\n    <template v-if=\"filterCount === totalCount\">\n      <i18n tag=\"div\" :path=\"kViewBlock('selected-all')\">\n        <template #totalCount>\n          <span class=\"font-weight-bold\" v-text=\"totalCount\" />\n        </template>\n        <template v-if=\"rowLabel\" #rowLabel>\n          {{ rowLabel }}\n        </template>\n      </i18n>\n      <span v-t=\"'click-graph'\" />\n    </template>\n    <template v-else>\n      <i18n tag=\"div\" :path=\"kViewBlock('selected-some')\">\n        <template v-for=\"(v, k) in { filterCount, totalCount }\" #[k]>\n          <span :key=\"k\" class=\"font-weight-bold\" v-text=\"v\" />\n        </template>\n        <template v-if=\"rowLabel\" #rowLabel>\n          {{ rowLabel }}\n        </template>\n      </i18n>\n      <span>&nbsp;| <a v-t=\"'Reset All'\" @click=\"resetAll\" /></span>\n    </template>\n  </VRow>\n</template>\n\n<script>\nimport * as dc from 'dc'\n\nimport kViewBlockMixin from '@/mixins/k-view-block'\n\nexport default {\n  mixins: [kViewBlockMixin],\n  props: {\n    filterCount: {\n      type: Number,\n      required: true\n    },\n    totalCount: {\n      type: Number,\n      required: true\n    },\n    rowLabel: {\n      type: String,\n      default: null\n    }\n  },\n  methods: {\n    resetAll() {\n      dc.filterAll()\n      dc.renderAll()\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewDcFilterCount.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewDcFilterCount.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewDcFilterCount.vue?vue&type=template&id=05251258&\"\nimport script from \"./ChartViewDcFilterCount.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewDcFilterCount.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('p',{staticClass:\"filters\"},[_c('span',[_vm._v(\" \"+_vm._s(_vm.$t('Current filter'))+\" \"),_c('span',{staticClass:\"filter\"})]),_c('a',{directives:[{name:\"t\",rawName:\"v-t\",value:('reset'),expression:\"'reset'\"}],staticClass:\"reset\",staticStyle:{\"display\":\"none\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <p class=\"filters\">\n    <span>\n      {{ $t('Current filter') }}\n      <span class=\"filter\" />\n    </span>\n    <a v-t=\"'reset'\" class=\"reset\" style=\"display: none\" />\n  </p>\n</template>\n\n<script>\nexport default {\n\n}\n</script>\n","import mod from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewFilters.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewFilters.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewFilters.vue?vue&type=template&id=2f9280d1&\"\nimport script from \"./ChartViewFilters.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewFilters.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('p',{staticClass:\"muted pull-right text-subtitle-2 mr-4 mb-1\"},[_c('span',{domProps:{\"innerHTML\":_vm._s(_vm.$t('select-time-range'))}}),_vm._t(\"default\")],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./ChartViewTextSelectTimeRange.vue?vue&type=template&id=46f28fc2&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import * as d3 from 'd3'\nimport * as dc from 'dc'\n\n// Functions to add x-label & y-label to Row Charts (Unsupported by dc.js)\n// https://www.intothevoid.io/data-visualization/row-chart-axis-labels-dc-js/\n// Use with:\n// contentChart.on('postRender', function (chart) {\n//  addXLabel(chart, 'Hours watched')\n// })\nexport function addXLabel(chartToUpdate, displayText) {\n  const textSelection = chartToUpdate\n    .svg()\n    .append('text')\n    .attr('class', 'x-axis-label')\n    .attr('text-anchor', 'middle')\n    .attr('x', chartToUpdate.width() / 2)\n    .attr('y', chartToUpdate.height() - 10)\n    .text(displayText)\n  const textDims = textSelection.node().getBBox()\n  const chartMargins = chartToUpdate.margins()\n\n  // Dynamically adjust positioning after reading text dimension from DOM\n  textSelection\n    .attr(\n      'x',\n      chartMargins.left +\n        (chartToUpdate.width() - chartMargins.left - chartMargins.right) / 2\n    )\n    .attr('y', chartToUpdate.height() - Math.ceil(textDims.height) / 2)\n}\nexport function addYLabel(chartToUpdate, displayText) {\n  const textSelection = chartToUpdate\n    .svg()\n    .append('text')\n    .attr('class', 'y-axis-label')\n    .attr('text-anchor', 'middle')\n    .attr('transform', 'rotate(-90)')\n    .attr('x', -chartToUpdate.height() / 2)\n    .attr('y', 10)\n    .text(displayText)\n  const textDims = textSelection.node().getBBox()\n  const chartMargins = chartToUpdate.margins()\n\n  // Dynamically adjust positioning after reading text dimension from DOM\n  textSelection\n    .attr(\n      'x',\n      -chartMargins.top -\n        (chartToUpdate.height() - chartMargins.top - chartMargins.bottom) / 2\n    )\n    .attr(\n      'y',\n      Math.max(\n        Math.ceil(textDims.height),\n        chartMargins.left - Math.ceil(textDims.height) - 5\n      )\n    )\n}\n\n/**\n * Transform a simple group to a cumulative one in order\n * to make cumulative line chart\n * @param {Crossfilter group} group the group to transform\n * @returns the cumulative group\n */\nexport function createCumulativeGroup(group) {\n  return {\n    all() {\n      const cumulate = {}\n      return group.all().map(function(d) {\n        if (cumulate[d.key[0]]) {\n          cumulate[d.key[0]] += d.value\n        } else {\n          cumulate[d.key[0]] = d.value\n        }\n        return { key: d.key, value: cumulate[d.key[0]] }\n      })\n    }\n  }\n}\n\n/**\n * Remove datapoints that are null in a crossfilter group\n * Used to hide empty bins in a bar graph\n * @param {Crossfilter group} group the group to transform\n * @returns the cleaned group\n */\nexport function removeEmptyBins(group) {\n  return {\n    top(n) {\n      return group\n        .top(Infinity)\n        .filter(function(d) {\n          return d.value.count !== 0 && d.value !== 0\n        })\n        .slice(0, n)\n    }\n  }\n}\n\nexport function addPiePercentage(chart) {\n  chart.selectAll('text.pie-slice.pie-label').call(function(t) {\n    t.each(function(d) {\n      const self = d3.select(this)\n      let text = self.text()\n      if (text.length > 14) { text = text.substring(0, 14) + '.. ' }\n      if (text.length > 0) {\n        text =\n          text +\n          ' (' +\n          dc.utils.printSingleValue(\n            ((d.endAngle - d.startAngle) / (2 * Math.PI)) * 100\n          ) +\n          '%)'\n      }\n      self.text(text)\n    })\n  })\n}\n"],"names":[],"sourceRoot":""}