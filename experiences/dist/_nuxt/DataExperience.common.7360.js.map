{"version":3,"file":"DataExperience.common.7360.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,+DAA+D,OAAO,sBAAsB,wBAAwB,OAAO,YAAY,yHAAyH,gCAAgC,YAAY,kBAAkB,OAAO,gCAAgC,KAAK,uBAAuB,QAAQ,8CAA8C,iBAAiB,wBAAwB,oBAAoB,OAAO,mBAAmB,YAAY,iCAAiC,kCAAkC,iBAAiB,OAAO,sBAAsB,iDAAiD,OAAO,kBAAkB,8BAA8B,OAAO,YAAY,oBAAoB,OAAO,wBAAwB,KAAK,6BAA6B,sBAAsB,0BAA0B,6EAA6E,YAAY,UAAU,+CAA+C,kBAAkB,yBAAyB,gEAAgE,2BAA2B,UAAU,YAAY,qBAAqB,SAAS,oBAAoB,OAAO,YAAY,aAAa,0BAA0B,+BAA+B,KAAK,yBAAyB,wBAAwB,gEAAgE,OAAO,aAAa,cAAc,OAAO,yCAAyC,YAAY,mBAAmB,aAAa,OAAO,mBAAmB,KAAK,+BAA+B,oCAAoC,OAAO,mBAAmB,6CAA6C,OAAO,yCAAyC,YAAY,mBAAmB,iBAAiB,OAAO,oBAAoB,UAAU,8BAA8B,oRAAoR,0BAA0B,+BAA+B,KAAK,yBAAyB,0BAA0B,yEAAyE,wBAAwB,sBAAsB,0CAA0C,sBAAsB,8BAA8B,qMAAqM,YAAY,oBAAoB,6CAA6C,8BAA8B,2BAA2B,sCAAsC,uBAAuB,gBAAgB,mLAAmL,kBAAkB,qBAAqB,aAAa,0BAA0B,+BAA+B,KAAK,yBAAyB,sCAAsC,gEAAgE,wBAAwB,OAAO,mBAAmB,iCAAiC,yCAAyC,8DAA8D,OAAO,2BAA2B,KAAK,+BAA+B,kEAAkE,OAAO,cAAc,2FAA2F,yBAAyB,yCAAyC;AAC10H;AACA;;;;;;;;;;;;;;;;;ACoIwB;AACA;AACc;AACX;AACoC;AAC6B;;AAE5F;AACA,uBAAuB,CAAC,gBAAe;;AAEvC,6FAAe;AACf,qCAAqC,uDAAqB;AAC1D,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,aAAY;AACtE,2BAA2B,cAAa;AACxC,6BAA6B,cAAa;AAC1C,4BAA4B,cAAa;AACzC,0BAA0B,cAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,uBAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC,4BAA4B,WAAW;AACvC;AACA;AACA,oBAAoB,aAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAS;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAiB;AAChC,WAAW,aAAY;AACvB,WAAW,eAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UACE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aACS;AACpB,iCAAiC,kBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA,oBAAoB,UAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAiB;AACvC;AACA;AACA;AACA,6DAA6D,aAAY;AACzE;AACA;AACA;AACA;AACA,oBAAoB,OAAM,EAAE,mBAAkB;AAC9C,6DAA6D,aAAY;AACzE;AACA;AACA;AACA;AACA,oBAAoB,OAAM;AAC1B,YAAY,oBAAmB;AAC/B;AACA;AACA,6DAA6D,WAAU;AACvE;AACA;AACA;AACA;AACA,oBAAoB,OAAM;AAC1B,YAAY,oBAAmB;AAC/B;AACA;AACA,6DAA6D,WAAU;AACvE;AACA;AACA;AACA;AACA,oBAAoB,OAAM,EAAE,kBAAiB;AAC7C,6DAA6D,WAAU;AACvE;AACA;AACA;AACA;AACA,oBAAoB,OAAM,EAAE,kBAAiB;AAC7C,6DAA6D,YAAW;AACxE;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA,CAAC;;;AC1eiK,CAAC,kGAAe,wDAAG,EAAC;;ACAtL;;;;;;;AEA2H;AACvC;AACL;AAC/E,CAAyH;;;AAGzH;AACyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,6DAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,qEAAe;;;;;;;;;;;;;;;;ACnBf,+BAA+B,6BAA6B,yBAAyB,qBAAqB,wDAAwD,0DAA0D,aAAa,YAAY,sCAAsC,0BAA0B,OAAO,uCAAuC,KAAK,yBAAyB,gBAAgB,8DAA8D,uBAAuB,wCAAwC,uCAAuC,4BAA4B,uFAAuF,uBAAuB,qCAAqC,+BAA+B,OAAO,iBAAiB,qBAAqB,wCAAwC;AACx1B;AACA;;;;;;;;;;;;;AC0ByE;AACT;AACiC;AACvB;;AAE1E,kFAAe;AACf,0BAA0B,mDAAwB,wDAAiB;AACnE,WAAW,6CAAuB;AAClC,CAAC;;;ACpCsJ,CAAC,uFAAe,6CAAG,EAAC;;;;ACAvE;AAC3B;AACL;;;AAGpE;AACA,CAAyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,kDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAAe","sources":["webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?12c8","webpack://@hestia.ai/data-experience/src/components/chart/view/ChartViewTimedObservationsViewer.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?7a44","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?ba66","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?24b1","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewVRowWebShare.vue?f831","webpack://@hestia.ai/data-experience/src/components/chart/view/ChartViewVRowWebShare.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewVRowWebShare.vue?2101","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewVRowWebShare.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('ChartViewVRowWebShare',[_c('VCol',{attrs:{\"cols\":\"12\",\"md\":\"8\"}},[_c('VRow',[_c('VCol',{attrs:{\"cols\":\"8\"}},[_c('p',[_vm._v(\" Number of information collected per \"),_c('strong',[_vm._v(_vm._s(_vm.timeInterval))])])]),_c('VCol',{staticClass:\"text-right\",attrs:{\"cols\":\"4\"}},[_c('VCheckbox',{attrs:{\"dense\":\"\",\"label\":`Cumulative`},on:{\"change\":_vm.changeAgg},model:{value:(_vm.checkbox),callback:function ($$v) {_vm.checkbox=$$v},expression:\"checkbox\"}})],1)],1),_c('div',{attrs:{\"id\":\"line-chart\"}}),_c('div',{staticClass:\"range-chart\",attrs:{\"id\":'range-chart' + _vm.graphId}})],1),_c('VCol',{attrs:{\"cols\":\"12\",\"md\":\"4\"}},[_c('p',[_vm._v(\"Information Type\")]),_c('div',{attrs:{\"id\":\"row-chart\"}})])],1),_c('VRow',[_c('VCol',{attrs:{\"cols\":\"9\"}},[_c('VRadioGroup',{attrs:{\"row\":\"\",\"mandatory\":\"\"},on:{\"change\":_vm.filterTimeRange},scopedSlots:_vm._u([{key:\"label\",fn:function(){return [_c('div',[_vm._v(\"Select a \"),_c('strong',[_vm._v(\"time range\")])])]},proxy:true}]),model:{value:(_vm.timeRange),callback:function ($$v) {_vm.timeRange=$$v},expression:\"timeRange\"}},_vm._l((['ALL', '1Y', '3M', '1M', '7D', '1D']),function(value){return _c('VRadio',_vm._b({key:value},'VRadio',{ value, label: value },false))}),1)],1),_c('VCol',{attrs:{\"cols\":\"3\"}},[_c('VBtn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){return _vm.resetAll()}}},[_vm._v(\" Reset all filters \")])],1)],1),_c('VRow',[_c('VCol',{attrs:{\"cols\":\"12\"}},[_c('VTabs',{model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},[_c('VTab',{attrs:{\"href\":\"#overview\"},on:{\"click\":_vm.resetSourceFilter}},[_vm._v(\" Overview \")]),_c('VTab',{attrs:{\"href\":\"#details\"}},[_vm._v(\" Details \")])],1),_c('VTabsItems',{model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},[_c('VTabItem',{attrs:{\"value\":\"overview\"}},[_c('p',{staticClass:\"text-subtitle-1\"},[_c('strong',[_vm._v(_vm._s(_vm.title))]),_vm._v(\" knows about \"),_c('strong',[_vm._v(_vm._s(_vm.total))]),_vm._v(\" things that happened between \"),_c('strong',[_vm._v(_vm._s(_vm.currMinDateStr))]),_vm._v(\" and \"),_c('strong',[_vm._v(_vm._s(_vm.currMaxDateStr))]),_c('VBtn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){return _vm.tabDetails()}}},[_vm._v(\" See All \")])],1),_c('VList',_vm._l((_vm.items),function(item){return _c('VListGroup',{key:item.title,attrs:{\"prepend-icon\":item.action,\"no-action\":\"\"},scopedSlots:_vm._u([{key:\"activator\",fn:function(){return [_c('VListItemContent',[_c('VListItemTitle',[_c('strong',[_vm._v(_vm._s(item.count))]),_vm._v(\" were regarding your \"),_c('strong',[_vm._v(_vm._s(item.title))]),_vm._v(\" activity. \")])],1)]},proxy:true}],null,true),model:{value:(item.active),callback:function ($$v) {_vm.$set(item, \"active\", $$v)},expression:\"item.active\"}},[_vm._l((item.items),function(child){return _c('VListItem',{key:child.title},[_c('VListItemContent',[_c('VListItemTitle',[_c('strong',[_vm._v(_vm._s(child.count))]),_vm._v(\" records of \"),_c('strong',[_vm._v(_vm._s(child.title))]),_vm._v(\" . \")])],1)],1)}),_c('VListItem',{key:\"child.showMore\"},[_c('VBtn',{staticClass:\"ma-1\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){return _vm.filterSource(item.title)}}},[_vm._v(\" See All \"+_vm._s(item.title)+\" activity \")])],1)],2)}),1)],1),_c('VTabItem',{attrs:{\"value\":\"details\"}},[(_vm.currSourceFilter)?_c('p',{staticClass:\"text-subtitle-1 text-right\"},[_vm._v(\" \"+_vm._s(_vm.$t('Current filter'))+\" \"),_c('VBtn',{attrs:{\"small\":\"\",\"elevation\":\"2\"},on:{\"click\":_vm.resetSourceFilter}},[_c('strong',[_vm._v(_vm._s(_vm.currSourceFilter))]),_c('VIcon',{attrs:{\"x-small\":\"\"}},[_vm._v(\" $vuetify.icons.mdiClose \")])],1)],1):_vm._e(),_c('UnitFilterableTable',_vm._b({},'UnitFilterableTable',{ headers: _vm.header, items: _vm.results },false))],1)],1)],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <VContainer>\n    <ChartViewVRowWebShare>\n      <VCol cols=\"12\" md=\"8\">\n        <VRow>\n          <VCol cols=\"8\">\n            <p>\n              Number of information collected per\n              <strong>{{ timeInterval }}</strong>\n            </p>\n          </VCol>\n          <VCol cols=\"4\" class=\"text-right\">\n            <VCheckbox\n              v-model=\"checkbox\"\n              dense\n              :label=\"`Cumulative`\"\n              @change=\"changeAgg\"\n            />\n          </VCol>\n        </VRow>\n        <div id=\"line-chart\" />\n        <div :id=\"'range-chart' + graphId\" class=\"range-chart\" />\n      </VCol>\n      <VCol cols=\"12\" md=\"4\">\n        <p>Information Type</p>\n        <div id=\"row-chart\" />\n      </VCol>\n    </ChartViewVRowWebShare>\n    <VRow>\n      <VCol cols=\"9\">\n        <VRadioGroup\n          v-model=\"timeRange\"\n          row\n          mandatory\n          @change=\"filterTimeRange\"\n        >\n          <template #label>\n            <div>Select a <strong>time range</strong></div>\n          </template>\n          <VRadio\n            v-for=\"value in ['ALL', '1Y', '3M', '1M', '7D', '1D']\"\n            :key=\"value\"\n            v-bind=\"{ value, label: value }\"\n          />\n        </VRadioGroup>\n      </VCol>\n      <VCol cols=\"3\">\n        <VBtn class=\"ma-2\" outlined color=\"indigo\" @click=\"resetAll()\">\n          Reset all filters\n        </VBtn>\n      </VCol>\n    </VRow>\n    <VRow>\n      <VCol cols=\"12\">\n        <VTabs v-model=\"tab\">\n          <VTab href=\"#overview\" @click=\"resetSourceFilter\">\n            Overview\n          </VTab>\n          <VTab href=\"#details\">\n            Details\n          </VTab>\n        </VTabs>\n        <VTabsItems v-model=\"tab\">\n          <VTabItem value=\"overview\">\n            <p class=\"text-subtitle-1\">\n              <strong>{{ title }}</strong> knows about\n              <strong>{{ total }}</strong> things that happened between\n              <strong>{{ currMinDateStr }}</strong> and\n              <strong>{{ currMaxDateStr }}</strong>\n              <VBtn class=\"ma-2\" outlined color=\"indigo\" @click=\"tabDetails()\">\n                See All\n              </VBtn>\n            </p>\n            <VList>\n              <VListGroup\n                v-for=\"item in items\"\n                :key=\"item.title\"\n                v-model=\"item.active\"\n                :prepend-icon=\"item.action\"\n                no-action\n              >\n                <template #activator>\n                  <VListItemContent>\n                    <VListItemTitle>\n                      <strong>{{ item.count }}</strong>\n                      were regarding your\n                      <strong>{{ item.title }}</strong>\n                      activity.\n                    </VListItemTitle>\n                  </VListItemContent>\n                </template>\n\n                <VListItem v-for=\"child in item.items\" :key=\"child.title\">\n                  <VListItemContent>\n                    <VListItemTitle>\n                      <strong>{{ child.count }}</strong>\n                      records of\n                      <strong>{{ child.title }}</strong>\n                      .\n                    </VListItemTitle>\n                  </VListItemContent>\n                </VListItem>\n                <VListItem key=\"child.showMore\">\n                  <VBtn\n                    class=\"ma-1\"\n                    outlined\n                    color=\"indigo\"\n                    @click=\"filterSource(item.title)\"\n                  >\n                    See All {{ item.title }} activity\n                  </VBtn>\n                </VListItem>\n              </VListGroup>\n            </VList>\n          </VTabItem>\n          <VTabItem value=\"details\">\n            <p v-if=\"currSourceFilter\" class=\"text-subtitle-1 text-right\">\n              {{ $t('Current filter') }}\n              <VBtn small elevation=\"2\" @click=\"resetSourceFilter\">\n                <strong>{{ currSourceFilter }}</strong>\n                <VIcon x-small>\n                  $vuetify.icons.mdiClose\n                </VIcon>\n              </VBtn>\n            </p>\n            <UnitFilterableTable v-bind=\"{ headers: header, items: results }\" />\n          </VTabItem>\n        </VTabsItems>\n      </VCol>\n    </VRow>\n  </VContainer>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport * as dc from 'dc'\nimport crossfilter from 'crossfilter2'\nimport mixin from './mixin'\nimport ChartViewVRowWebShare from './ChartViewVRowWebShare.vue'\nimport UnitFilterableTable from '@/components/unit/filterable-table/UnitFilterableTable.vue'\n\n// Remove warning on default colorscheme, even if not used..\ndc.config.defaultColors(d3.schemePaired)\n\nexport default {\n  components: { ChartViewVRowWebShare, UnitFilterableTable },\n  mixins: [mixin],\n  props: {\n    title: {\n      type: String,\n      default: () => 'Google'\n    },\n    dateFormats: {\n      type: Array,\n      default: () => ['%Y-%m-%dT%H:%M:%S%Z', '%Y-%m-%dT%H:%M:%S.%L%Z']\n    }\n  },\n  data() {\n    return {\n      total: null,\n      timeRange: null,\n      timeInterval: 'month',\n      tab: null,\n      lineChart: null,\n      rangeChart: null,\n      timeDimension: null,\n      overviewDimension: null,\n      minDate: null,\n      maxDate: null,\n      currMinDateStr: 'NaN',\n      currMaxDateStr: 'NaN',\n      currSourceFilter: null,\n      checkbox: false,\n      timelineGroup: null,\n      formatTimeDay: null,\n      formatTimeMonth: null,\n      formatTimeHour: null,\n      items: [],\n      header: [\n        { text: 'Date', value: 'dateStr' },\n        { text: 'App', value: 'eventSource' },\n        { text: 'Event type', value: 'eventType' },\n        { text: 'Event value', value: 'eventValue' }\n      ],\n      results: []\n    }\n  },\n  methods: {\n    resetAll() {\n      this.timeRange = 'ALL'\n      this.filterTimeRange(this.timeRange)\n      dc.filterAll()\n      dc.redrawAll()\n      this.resetSourceFilter()\n    },\n    // Change tab\n    tabDetails() {\n      this.tab = 'details'\n    },\n    // When no data available for a specific time period, show an empty message\n    showEmptyMessage(chart) {\n      const isEmpty = d3.sum(chart.group().all().map(chart.valueAccessor())) === 0\n      const data = isEmpty ? [1] : []\n      const empty = chart\n        .svg()\n        .selectAll('.empty-message')\n        .data(data)\n        .enter()\n        .append('text')\n        .text('No data during this time period')\n        .attr('text-anchor', 'middle')\n        .attr('alignment-baseline', 'middle')\n        .attr('x', chart.margins().left + chart.effectiveWidth() / 2)\n        .attr('y', chart.margins().top + chart.effectiveHeight() / 2)\n        .attr('class', 'empty-message')\n        .style('opacity', 0)\n      if (!isEmpty) {\n        chart.svg().selectAll('.empty-message').remove()\n      } else {\n        empty.transition().duration(1000).style('opacity', 1)\n      }\n    },\n    // Make a Fake group to display only value above 0 on the row graphs\n    removeEmptyBins(group) {\n      return {\n        top(n) {\n          return group\n            .top(Infinity)\n            .filter(function(d) {\n              return d.value.count !== 0 && d.value !== 0\n            })\n            .slice(0, n)\n        },\n        all() {\n          return group.all()\n        }\n      }\n    },\n    createCumulativeGroup(sourceGroup) {\n      return {\n        all() {\n          let cumulate = 0\n          return sourceGroup.all().map(function(d) {\n            cumulate += d.value\n            return { key: d.key, value: cumulate }\n          })\n        }\n      }\n    },\n    changeAgg() {\n      if (this.checkbox) {\n        this.lineChart.group(this.createCumulativeGroup(this.timelineGroup))\n      } else {\n        this.lineChart.group(this.timelineGroup)\n      }\n      dc.redrawAll()\n    },\n    // Main function to init component\n    drawViz() {\n      // Init table values\n      this.results = this.values\n      // Format dates\n      const dateFormatParsers = this.dateFormats.map(d => d3.timeParse(d))\n      this.formatTimeDay = d3.timeFormat('%Y-%m-%d')\n      this.formatTimeMonth = d3.timeFormat('%B %Y')\n      this.formatTimeHour = d3.timeFormat('%H:%M:%S')\n      const formatTimeS = d3.timeFormat('%d %B %Y')\n      this.results.forEach((d) => {\n        d.dateSrc = d.date\n        dateFormatParsers.some((parser) => {\n          d.date = parser(d.dateSrc)\n          return d.date != null\n        })\n        d.dateStr = this.formatTimeDay(d.date)\n      })\n      // Build index for crossfiltering\n      const ndx = crossfilter(this.results)\n      const all = ndx.groupAll()\n      // Compute groupby Count for overview\n      const overviewDimension = ndx.dimension(d => [\n        d.eventSource,\n        d.eventType,\n        d.icon\n      ])\n      const overviewGroup = overviewDimension.group().reduceCount()\n      this.filterItems(overviewGroup)\n      this.total = all.value()\n      // Dimension to filter by source\n      this.activityDimension = ndx.dimension(d => d.eventSource)\n      // Update items on each change of crossfilter\n      ndx.onChange(() => {\n        this.filterItems(overviewGroup)\n        this.total = all.value()\n        this.results = ndx.allFiltered()\n        this.currMinDateStr = formatTimeS(this.minDate)\n        this.currMaxDateStr = formatTimeS(this.maxDate)\n      })\n      // Compute and draw line chart\n      this.lineChart = new dc.LineChart('#line-chart')\n      this.rangeChart = new dc.BarChart('#range-chart' + this.graphId)\n      this.timeDimension = ndx.dimension(d => d.date)\n      this.timelineGroup = this.timeDimension\n        .group(d => d3.timeMonth(d))\n        .reduceCount()\n      this.maxDate = this.timeDimension.top(1)[0].date\n      this.currMaxDateStr = formatTimeS(this.maxDate)\n      this.minDate = this.timeDimension.bottom(1)[0].date\n      this.currMinDateStr = formatTimeS(this.minDate)\n      const height = 240\n      this.lineChart\n        .renderArea(true)\n        .width(d3.select('#line-chart').node().getBoundingClientRect().width)\n        .height(height)\n        .transitionDuration(1000)\n        .margins({ top: 20, right: 20, bottom: 20, left: 50 })\n        .group(this.timelineGroup)\n        .dimension(this.timeDimension)\n        .curve(d3.curveMonotoneX)\n        .x(d3.scaleTime().domain([this.minDate, this.maxDate]))\n        .y(d3.scaleLinear())\n        .ordinalColors(['#58539E'])\n        .brushOn(false)\n        .elasticX(false)\n        .elasticY(true)\n        .xyTipsOn(true)\n        .mouseZoomable(false)\n        .rangeChart(this.rangeChart)\n        .renderHorizontalGridLines(false)\n        .clipPadding(10)\n        .title(d => this.formatTimeMonth(+d.key) + ': ' + d.value)\n        .yAxisLabel('')\n        .renderDataPoints({\n          radius: 3,\n          fillOpacity: 0.8,\n          strokeOpacity: 0\n        })\n        .xAxis()\n        .ticks(5)\n      this.rangeChart.on('filtered', () => {\n        const filters = this.timeDimension.currentFilter()\n        if (filters) {\n          this.currMinDateStr = formatTimeS(filters[0])\n          this.currMaxDateStr = formatTimeS(filters[1])\n        } else {\n          this.currMinDateStr = formatTimeS(this.minDate)\n          this.currMaxDateStr = formatTimeS(this.maxDate)\n        }\n      })\n      // Compute and draw range chart\n      this.rangeChart\n        .width(d3\n          .select('#range-chart' + this.graphId)\n          .node()\n          .getBoundingClientRect().width)\n        .height(40)\n        .margins({ top: 0, right: 20, bottom: 20, left: 50 })\n        .dimension(this.timeDimension)\n        .group(this.timelineGroup)\n        .centerBar(true)\n        .brushOn(false)\n        .gap(1)\n        .x(d3\n          .scaleTime()\n          .domain([this.minDate, d3.timeDay.offset(this.maxDate, 1)]))\n      // .round(d3.timeDay.round)\n      // .alwaysUseRounding(true)\n      // .xUnits(d3.timeDays)\n        .ordinalColors([this.colorPalette[0]])\n        .yAxis()\n        .ticks(0)\n      // Compute and draw row chart\n      const rowChart = new dc.RowChart('#row-chart')\n      const typeDimension = ndx.dimension(d => d.eventType)\n      const typeGroup = typeDimension.group().reduceCount()\n      const width = d3.select('#row-chart').node().getBoundingClientRect().width\n      rowChart\n        .width(width)\n        .height(height + 55)\n        .margins({ top: 20, left: 10, right: 30, bottom: 20 })\n        .group(this.removeEmptyBins(typeGroup))\n        .dimension(typeDimension)\n        .ordinalColors(this.colorPalette)\n        .label(d => d.key)\n        .data(group => group.top(10))\n        .title(d => d.value)\n        .elasticX(true)\n        .xAxis()\n        .ticks(4)\n      rowChart.on('pretransition', this.showEmptyMessage)\n      // Render all graphs\n      dc.renderAll()\n    },\n    filterTimeRange(newValue) {\n      if (this.rangeChart === null) {\n        return\n      }\n      this.rangeChart.filter(null)\n      let minDate = null\n      const maxDate = d3.timeDay.offset(this.maxDate, 1)\n      let dateFormat = null\n      switch (newValue) {\n        case 'ALL':\n          this.timelineGroup = this.timeDimension.group(d => d3.timeMonth(d))\n          dateFormat = this.formatTimeMonth\n          this.timeInterval = 'month'\n          break\n        case '1Y':\n          minDate = d3.max([d3.timeYear.offset(this.maxDate, -1), this.minDate])\n          this.timelineGroup = this.timeDimension.group(d => d3.timeMonth(d))\n          dateFormat = this.formatTimeMonth\n          this.timeInterval = 'month'\n          break\n        case '3M':\n          minDate = d3.max([\n            d3.timeMonth.offset(this.maxDate, -3),\n            this.minDate\n          ])\n          this.timelineGroup = this.timeDimension.group(d => d3.timeDay(d))\n          dateFormat = this.formatTimeDay\n          this.timeInterval = 'day'\n          break\n        case '1M':\n          minDate = d3.max([\n            d3.timeMonth.offset(this.maxDate, -1),\n            this.minDate\n          ])\n          this.timelineGroup = this.timeDimension.group(d => d3.timeDay(d))\n          dateFormat = this.formatTimeDay\n          this.timeInterval = 'day'\n          break\n        case '7D':\n          minDate = d3.max([d3.timeDay.offset(this.maxDate, -7), this.minDate])\n          this.timelineGroup = this.timeDimension.group(d => d3.timeDay(d))\n          dateFormat = this.formatTimeDay\n          this.timeInterval = 'day'\n          break\n        case '1D':\n          minDate = d3.max([d3.timeDay.offset(this.maxDate, -1), this.minDate])\n          this.timelineGroup = this.timeDimension.group(d => d3.timeHour(d))\n          dateFormat = this.formatTimeHour\n          this.timeInterval = 'hour'\n          break\n      }\n      if (minDate !== null) {\n        this.rangeChart.filter(dc.filters.RangedFilter(minDate, maxDate))\n      }\n      this.lineChart\n        .dimension(this.timeDimension)\n        .group(this.timelineGroup)\n        .title(d => dateFormat(+d.key) + ': ' + d.value)\n        .transitionDuration(1000)\n        .render()\n      dc.redrawAll()\n      /*\n            this.lineChart\n              .dimension()\n              .group(postsGroup)\n              .transitionDuration(1000)\n              .render()\n            */\n    },\n    filterItems(overviewGroup) {\n      const counts = overviewGroup.top(Infinity).reduce((p, c) => {\n        if (!Object.prototype.hasOwnProperty.call(p, c.key[0])) {\n          p[c.key[0]] = {}\n          p[c.key[0]].count = 0\n          p[c.key[0]].title = c.key[0]\n          p[c.key[0]].action = c.key[2]\n          p[c.key[0]].items = []\n        }\n        p[c.key[0]].count += c.value\n        if (c.value > 0) {\n          p[c.key[0]].items.push({ title: c.key[1], count: c.value })\n        }\n        return p\n      }, {})\n      this.items = Object.values(counts).filter(d => d.count > 0)\n    },\n    filterSource(title) {\n      this.currSourceFilter = title\n      this.activityDimension.filter(title)\n      dc.redrawAll()\n      this.tabDetails()\n    },\n    resetSourceFilter() {\n      this.currSourceFilter = null\n      this.activityDimension.filter(null)\n      dc.redrawAll()\n    }\n  }\n}\n</script>\n<style scoped>\n::v-deep .brush .custom-brush-handle {\n  display: auto;\n}\n</style>\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"","// extracted by mini-css-extract-plugin\nexport {};","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewTimedObservationsViewer.vue?vue&type=style&index=0&id=8c8982a4&prod&scoped=true&lang=css&\"","import { render, staticRenderFns } from \"./ChartViewTimedObservationsViewer.vue?vue&type=template&id=8c8982a4&scoped=true&\"\nimport script from \"./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ChartViewTimedObservationsViewer.vue?vue&type=style&index=0&id=8c8982a4&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"8c8982a4\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VRow',_vm._b({ref:\"domToImageNode\"},'VRow',_vm.$attrs,false),[_vm._t(\"default\"),_c('VCol',{staticClass:\"dom-to-image-exclude webshare d-flex\",attrs:{\"cols\":\"12\"}},[_c('div',{staticClass:\"webshare__export-button\"},[_c('BaseButton',_vm._b({attrs:{\"mdi-icon\":\"mdiExport\",\"text\":\"Export\"},on:{\"click\":_vm.exportImage}},'BaseButton',{ progress: _vm.progress, status: _vm.status, error: _vm.error },false))],1),_c('div',{staticClass:\"webshare__download-button\"},[_c('BaseButtonDownloadData',_vm._b({},'BaseButtonDownloadData',{ disabled: !_vm.blob, extension: _vm.extension, filename: _vm.filename, data: _vm.blob },false))],1),_c('div',{staticClass:\"webshare__share-button\"},[_c('BaseButtonShare',_vm._b({attrs:{\"file-share\":\"\"}},'BaseButtonShare',{ files: _vm.files, disabled: !_vm.files },false))],1)])],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <VRow ref=\"domToImageNode\" v-bind=\"$attrs\">\n      <slot />\n      <VCol cols=\"12\" class=\"dom-to-image-exclude webshare d-flex\">\n        <div class=\"webshare__export-button\">\n          <BaseButton\n            mdi-icon=\"mdiExport\"\n            text=\"Export\"\n            v-bind=\"{ progress, status, error }\"\n            @click=\"exportImage\"\n          />\n        </div>\n        <div class=\"webshare__download-button\">\n        <BaseButtonDownloadData\n          v-bind=\"{ disabled: !blob, extension, filename, data: blob }\"\n        />\n        </div>\n        <div class=\"webshare__share-button\">\n        <BaseButtonShare\n          file-share\n          v-bind=\"{ files, disabled: !files }\"\n        />\n        </div>\n      </VCol>\n    </VRow>\n</template>\n\n<script>\nimport exportImageMixinFactory from '@/mixins/export-image-mixin-factory'\nimport BaseButton from '@/components/base/button/BaseButton.vue'\nimport BaseButtonDownloadData from '@/components/base/button/download/BaseButtonDownloadData.vue'\nimport BaseButtonShare from '@/components/base/button/BaseButtonShare.vue'\n\nexport default {\n  components: { BaseButton, BaseButtonDownloadData, BaseButtonShare },\n  mixins: [exportImageMixinFactory()]\n}\n</script>\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewVRowWebShare.vue?vue&type=template&id=07259b63&\"\nimport script from \"./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":[],"sourceRoot":""}