{"version":3,"file":"data-experience.umd.3189.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,+DAA+D,OAAO,sBAAsB,wBAAwB,OAAO,YAAY,yHAAyH,gCAAgC,YAAY,kBAAkB,OAAO,gCAAgC,KAAK,uBAAuB,QAAQ,8CAA8C,iBAAiB,wBAAwB,oBAAoB,OAAO,mBAAmB,YAAY,iCAAiC,kCAAkC,iBAAiB,OAAO,sBAAsB,iDAAiD,OAAO,kBAAkB,8BAA8B,OAAO,YAAY,oBAAoB,OAAO,wBAAwB,KAAK,6BAA6B,sBAAsB,0BAA0B,6EAA6E,YAAY,UAAU,+CAA+C,kBAAkB,yBAAyB,gEAAgE,2BAA2B,UAAU,YAAY,qBAAqB,SAAS,oBAAoB,OAAO,YAAY,aAAa,0BAA0B,+BAA+B,KAAK,yBAAyB,wBAAwB,gEAAgE,OAAO,aAAa,cAAc,OAAO,yCAAyC,YAAY,mBAAmB,aAAa,OAAO,mBAAmB,KAAK,+BAA+B,oCAAoC,OAAO,mBAAmB,6CAA6C,OAAO,yCAAyC,YAAY,mBAAmB,iBAAiB,OAAO,oBAAoB,UAAU,8BAA8B,oRAAoR,0BAA0B,+BAA+B,KAAK,yBAAyB,0BAA0B,yEAAyE,wBAAwB,sBAAsB,0CAA0C,sBAAsB,8BAA8B,qMAAqM,YAAY,oBAAoB,6CAA6C,8BAA8B,2BAA2B,sCAAsC,uBAAuB,gBAAgB,mLAAmL,kBAAkB,qBAAqB,aAAa,0BAA0B,+BAA+B,KAAK,yBAAyB,sCAAsC,gEAAgE,wBAAwB,OAAO,mBAAmB,iCAAiC,yCAAyC,8DAA8D,OAAO,2BAA2B,KAAK,+BAA+B,kEAAkE,OAAO,cAAc,2FAA2F,yBAAyB,yCAAyC;AAC10H;AACA;;;;;;;;;;;;;;;;;ACoIwB;AACA;AACc;AACX;AACoC;AAC6B;;AAE5F;AACA,uBAAuB,CAAC,yBAAe;;AAEvC,6FAAe;AACf,qCAAqC,uDAAqB;AAC1D,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sBAAY;AACtE,2BAA2B,uBAAa;AACxC,6BAA6B,uBAAa;AAC1C,4BAA4B,uBAAa;AACzC,0BAA0B,uBAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,uBAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC,4BAA4B,WAAW;AACvC;AACA;AACA,oBAAoB,sBAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAS;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,2BAAiB;AAChC,WAAW,qBAAY;AACvB,WAAW,wBAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBACE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBACS;AACpB,iCAAiC,kCAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA,oBAAoB,kBAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kCAAiB;AACvC;AACA;AACA;AACA,6DAA6D,sBAAY;AACzE;AACA;AACA;AACA;AACA,oBAAoB,gBAAM,EAAE,mCAAkB;AAC9C,6DAA6D,sBAAY;AACzE;AACA;AACA;AACA;AACA,oBAAoB,gBAAM;AAC1B,YAAY,oCAAmB;AAC/B;AACA;AACA,6DAA6D,oBAAU;AACvE;AACA;AACA;AACA;AACA,oBAAoB,gBAAM;AAC1B,YAAY,oCAAmB;AAC/B;AACA;AACA,6DAA6D,oBAAU;AACvE;AACA;AACA;AACA;AACA,oBAAoB,gBAAM,EAAE,kCAAiB;AAC7C,6DAA6D,oBAAU;AACvE;AACA;AACA;AACA;AACA,oBAAoB,gBAAM,EAAE,kCAAiB;AAC7C,6DAA6D,qBAAW;AACxE;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA,CAAC;;;AC1eiK,CAAC,kGAAe,wDAAG,EAAC;;ACAtL;;;;;;;AEA2H;AACvC;AACL;AAC/E,CAAyH;;;AAGzH;AACyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,6DAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,qEAAe;;;;;;;;;;;;;;;;ACnBf,+BAA+B,6BAA6B,yBAAyB,qBAAqB,wDAAwD,0CAA0C,aAAa,0BAA0B,OAAO,mCAAmC,KAAK,yBAAyB,gBAAgB,8DAA8D,8CAA8C,4BAA4B,uFAAuF,sCAAsC,OAAO,iBAAiB,qBAAqB,wCAAwC;AACrqB;AACA;;;;;;;;;;;;;ACiByE;AACT;AACiC;AACvB;;AAE1E,kFAAe;AACf,0BAA0B,mDAAwB,wDAAiB;AACnE,WAAW,6CAAuB;AAClC,CAAC;;;AC3BsJ,CAAC,uFAAe,6CAAG,EAAC;;;;ACAvE;AAC3B;AACL;;;AAGpE;AACA,CAAyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,kDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAAe;;;;;;;;;;;;AClBsB;AACJ;AACjC;AACmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB;AACxB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,iBAAiB;AACjB;AACA,yBAAyB,gDAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+DAAe,8DAAK,QAAQ,qEAAe,CAAC","sources":["webpack://data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?c380","webpack://data-experience/src/components/chart/view/ChartViewTimedObservationsViewer.vue","webpack://data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?7a44","webpack://data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?2b20","webpack://data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue?a861","webpack://data-experience/./src/components/chart/view/ChartViewTimedObservationsViewer.vue","webpack://data-experience/./src/components/chart/view/ChartViewVRowWebShare.vue?ea0d","webpack://data-experience/src/components/chart/view/ChartViewVRowWebShare.vue","webpack://data-experience/./src/components/chart/view/ChartViewVRowWebShare.vue?2101","webpack://data-experience/./src/components/chart/view/ChartViewVRowWebShare.vue","webpack://data-experience/./src/components/chart/view/mixin.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('ChartViewVRowWebShare',[_c('VCol',{attrs:{\"cols\":\"12\",\"md\":\"8\"}},[_c('VRow',[_c('VCol',{attrs:{\"cols\":\"8\"}},[_c('p',[_vm._v(\" Number of information collected per \"),_c('strong',[_vm._v(_vm._s(_vm.timeInterval))])])]),_c('VCol',{staticClass:\"text-right\",attrs:{\"cols\":\"4\"}},[_c('VCheckbox',{attrs:{\"dense\":\"\",\"label\":`Cumulative`},on:{\"change\":_vm.changeAgg},model:{value:(_vm.checkbox),callback:function ($$v) {_vm.checkbox=$$v},expression:\"checkbox\"}})],1)],1),_c('div',{attrs:{\"id\":\"line-chart\"}}),_c('div',{staticClass:\"range-chart\",attrs:{\"id\":'range-chart' + _vm.graphId}})],1),_c('VCol',{attrs:{\"cols\":\"12\",\"md\":\"4\"}},[_c('p',[_vm._v(\"Information Type\")]),_c('div',{attrs:{\"id\":\"row-chart\"}})])],1),_c('VRow',[_c('VCol',{attrs:{\"cols\":\"9\"}},[_c('VRadioGroup',{attrs:{\"row\":\"\",\"mandatory\":\"\"},on:{\"change\":_vm.filterTimeRange},scopedSlots:_vm._u([{key:\"label\",fn:function(){return [_c('div',[_vm._v(\"Select a \"),_c('strong',[_vm._v(\"time range\")])])]},proxy:true}]),model:{value:(_vm.timeRange),callback:function ($$v) {_vm.timeRange=$$v},expression:\"timeRange\"}},_vm._l((['ALL', '1Y', '3M', '1M', '7D', '1D']),function(value){return _c('VRadio',_vm._b({key:value},'VRadio',{ value, label: value },false))}),1)],1),_c('VCol',{attrs:{\"cols\":\"3\"}},[_c('VBtn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){return _vm.resetAll()}}},[_vm._v(\" Reset all filters \")])],1)],1),_c('VRow',[_c('VCol',{attrs:{\"cols\":\"12\"}},[_c('VTabs',{model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},[_c('VTab',{attrs:{\"href\":\"#overview\"},on:{\"click\":_vm.resetSourceFilter}},[_vm._v(\" Overview \")]),_c('VTab',{attrs:{\"href\":\"#details\"}},[_vm._v(\" Details \")])],1),_c('VTabsItems',{model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},[_c('VTabItem',{attrs:{\"value\":\"overview\"}},[_c('p',{staticClass:\"text-subtitle-1\"},[_c('strong',[_vm._v(_vm._s(_vm.title))]),_vm._v(\" knows about \"),_c('strong',[_vm._v(_vm._s(_vm.total))]),_vm._v(\" things that happened between \"),_c('strong',[_vm._v(_vm._s(_vm.currMinDateStr))]),_vm._v(\" and \"),_c('strong',[_vm._v(_vm._s(_vm.currMaxDateStr))]),_c('VBtn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){return _vm.tabDetails()}}},[_vm._v(\" See All \")])],1),_c('VList',_vm._l((_vm.items),function(item){return _c('VListGroup',{key:item.title,attrs:{\"prepend-icon\":item.action,\"no-action\":\"\"},scopedSlots:_vm._u([{key:\"activator\",fn:function(){return [_c('VListItemContent',[_c('VListItemTitle',[_c('strong',[_vm._v(_vm._s(item.count))]),_vm._v(\" were regarding your \"),_c('strong',[_vm._v(_vm._s(item.title))]),_vm._v(\" activity. \")])],1)]},proxy:true}],null,true),model:{value:(item.active),callback:function ($$v) {_vm.$set(item, \"active\", $$v)},expression:\"item.active\"}},[_vm._l((item.items),function(child){return _c('VListItem',{key:child.title},[_c('VListItemContent',[_c('VListItemTitle',[_c('strong',[_vm._v(_vm._s(child.count))]),_vm._v(\" records of \"),_c('strong',[_vm._v(_vm._s(child.title))]),_vm._v(\" . \")])],1)],1)}),_c('VListItem',{key:\"child.showMore\"},[_c('VBtn',{staticClass:\"ma-1\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){return _vm.filterSource(item.title)}}},[_vm._v(\" See All \"+_vm._s(item.title)+\" activity \")])],1)],2)}),1)],1),_c('VTabItem',{attrs:{\"value\":\"details\"}},[(_vm.currSourceFilter)?_c('p',{staticClass:\"text-subtitle-1 text-right\"},[_vm._v(\" \"+_vm._s(_vm.$t('Current filter'))+\" \"),_c('VBtn',{attrs:{\"small\":\"\",\"elevation\":\"2\"},on:{\"click\":_vm.resetSourceFilter}},[_c('strong',[_vm._v(_vm._s(_vm.currSourceFilter))]),_c('VIcon',{attrs:{\"x-small\":\"\"}},[_vm._v(\" $vuetify.icons.mdiClose \")])],1)],1):_vm._e(),_c('UnitFilterableTable',_vm._b({},'UnitFilterableTable',{ headers: _vm.header, items: _vm.results },false))],1)],1)],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <VContainer>\r\n    <ChartViewVRowWebShare>\r\n      <VCol cols=\"12\" md=\"8\">\r\n        <VRow>\r\n          <VCol cols=\"8\">\r\n            <p>\r\n              Number of information collected per\r\n              <strong>{{ timeInterval }}</strong>\r\n            </p>\r\n          </VCol>\r\n          <VCol cols=\"4\" class=\"text-right\">\r\n            <VCheckbox\r\n              v-model=\"checkbox\"\r\n              dense\r\n              :label=\"`Cumulative`\"\r\n              @change=\"changeAgg\"\r\n            />\r\n          </VCol>\r\n        </VRow>\r\n        <div id=\"line-chart\" />\r\n        <div :id=\"'range-chart' + graphId\" class=\"range-chart\" />\r\n      </VCol>\r\n      <VCol cols=\"12\" md=\"4\">\r\n        <p>Information Type</p>\r\n        <div id=\"row-chart\" />\r\n      </VCol>\r\n    </ChartViewVRowWebShare>\r\n    <VRow>\r\n      <VCol cols=\"9\">\r\n        <VRadioGroup\r\n          v-model=\"timeRange\"\r\n          row\r\n          mandatory\r\n          @change=\"filterTimeRange\"\r\n        >\r\n          <template #label>\r\n            <div>Select a <strong>time range</strong></div>\r\n          </template>\r\n          <VRadio\r\n            v-for=\"value in ['ALL', '1Y', '3M', '1M', '7D', '1D']\"\r\n            :key=\"value\"\r\n            v-bind=\"{ value, label: value }\"\r\n          />\r\n        </VRadioGroup>\r\n      </VCol>\r\n      <VCol cols=\"3\">\r\n        <VBtn class=\"ma-2\" outlined color=\"indigo\" @click=\"resetAll()\">\r\n          Reset all filters\r\n        </VBtn>\r\n      </VCol>\r\n    </VRow>\r\n    <VRow>\r\n      <VCol cols=\"12\">\r\n        <VTabs v-model=\"tab\">\r\n          <VTab href=\"#overview\" @click=\"resetSourceFilter\">\r\n            Overview\r\n          </VTab>\r\n          <VTab href=\"#details\">\r\n            Details\r\n          </VTab>\r\n        </VTabs>\r\n        <VTabsItems v-model=\"tab\">\r\n          <VTabItem value=\"overview\">\r\n            <p class=\"text-subtitle-1\">\r\n              <strong>{{ title }}</strong> knows about\r\n              <strong>{{ total }}</strong> things that happened between\r\n              <strong>{{ currMinDateStr }}</strong> and\r\n              <strong>{{ currMaxDateStr }}</strong>\r\n              <VBtn class=\"ma-2\" outlined color=\"indigo\" @click=\"tabDetails()\">\r\n                See All\r\n              </VBtn>\r\n            </p>\r\n            <VList>\r\n              <VListGroup\r\n                v-for=\"item in items\"\r\n                :key=\"item.title\"\r\n                v-model=\"item.active\"\r\n                :prepend-icon=\"item.action\"\r\n                no-action\r\n              >\r\n                <template #activator>\r\n                  <VListItemContent>\r\n                    <VListItemTitle>\r\n                      <strong>{{ item.count }}</strong>\r\n                      were regarding your\r\n                      <strong>{{ item.title }}</strong>\r\n                      activity.\r\n                    </VListItemTitle>\r\n                  </VListItemContent>\r\n                </template>\r\n\r\n                <VListItem v-for=\"child in item.items\" :key=\"child.title\">\r\n                  <VListItemContent>\r\n                    <VListItemTitle>\r\n                      <strong>{{ child.count }}</strong>\r\n                      records of\r\n                      <strong>{{ child.title }}</strong>\r\n                      .\r\n                    </VListItemTitle>\r\n                  </VListItemContent>\r\n                </VListItem>\r\n                <VListItem key=\"child.showMore\">\r\n                  <VBtn\r\n                    class=\"ma-1\"\r\n                    outlined\r\n                    color=\"indigo\"\r\n                    @click=\"filterSource(item.title)\"\r\n                  >\r\n                    See All {{ item.title }} activity\r\n                  </VBtn>\r\n                </VListItem>\r\n              </VListGroup>\r\n            </VList>\r\n          </VTabItem>\r\n          <VTabItem value=\"details\">\r\n            <p v-if=\"currSourceFilter\" class=\"text-subtitle-1 text-right\">\r\n              {{ $t('Current filter') }}\r\n              <VBtn small elevation=\"2\" @click=\"resetSourceFilter\">\r\n                <strong>{{ currSourceFilter }}</strong>\r\n                <VIcon x-small>\r\n                  $vuetify.icons.mdiClose\r\n                </VIcon>\r\n              </VBtn>\r\n            </p>\r\n            <UnitFilterableTable v-bind=\"{ headers: header, items: results }\" />\r\n          </VTabItem>\r\n        </VTabsItems>\r\n      </VCol>\r\n    </VRow>\r\n  </VContainer>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3'\r\nimport * as dc from 'dc'\r\nimport crossfilter from 'crossfilter2'\r\nimport mixin from './mixin'\r\nimport ChartViewVRowWebShare from './ChartViewVRowWebShare.vue'\r\nimport UnitFilterableTable from '@/components/unit/filterable-table/UnitFilterableTable.vue'\r\n\r\n// Remove warning on default colorscheme, even if not used..\r\ndc.config.defaultColors(d3.schemePaired)\r\n\r\nexport default {\r\n  components: { ChartViewVRowWebShare, UnitFilterableTable },\r\n  mixins: [mixin],\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: () => 'Google'\r\n    },\r\n    dateFormats: {\r\n      type: Array,\r\n      default: () => ['%Y-%m-%dT%H:%M:%S%Z', '%Y-%m-%dT%H:%M:%S.%L%Z']\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      total: null,\r\n      timeRange: null,\r\n      timeInterval: 'month',\r\n      tab: null,\r\n      lineChart: null,\r\n      rangeChart: null,\r\n      timeDimension: null,\r\n      overviewDimension: null,\r\n      minDate: null,\r\n      maxDate: null,\r\n      currMinDateStr: 'NaN',\r\n      currMaxDateStr: 'NaN',\r\n      currSourceFilter: null,\r\n      checkbox: false,\r\n      timelineGroup: null,\r\n      formatTimeDay: null,\r\n      formatTimeMonth: null,\r\n      formatTimeHour: null,\r\n      items: [],\r\n      header: [\r\n        { text: 'Date', value: 'dateStr' },\r\n        { text: 'App', value: 'eventSource' },\r\n        { text: 'Event type', value: 'eventType' },\r\n        { text: 'Event value', value: 'eventValue' }\r\n      ],\r\n      results: []\r\n    }\r\n  },\r\n  methods: {\r\n    resetAll() {\r\n      this.timeRange = 'ALL'\r\n      this.filterTimeRange(this.timeRange)\r\n      dc.filterAll()\r\n      dc.redrawAll()\r\n      this.resetSourceFilter()\r\n    },\r\n    // Change tab\r\n    tabDetails() {\r\n      this.tab = 'details'\r\n    },\r\n    // When no data available for a specific time period, show an empty message\r\n    showEmptyMessage(chart) {\r\n      const isEmpty = d3.sum(chart.group().all().map(chart.valueAccessor())) === 0\r\n      const data = isEmpty ? [1] : []\r\n      const empty = chart\r\n        .svg()\r\n        .selectAll('.empty-message')\r\n        .data(data)\r\n        .enter()\r\n        .append('text')\r\n        .text('No data during this time period')\r\n        .attr('text-anchor', 'middle')\r\n        .attr('alignment-baseline', 'middle')\r\n        .attr('x', chart.margins().left + chart.effectiveWidth() / 2)\r\n        .attr('y', chart.margins().top + chart.effectiveHeight() / 2)\r\n        .attr('class', 'empty-message')\r\n        .style('opacity', 0)\r\n      if (!isEmpty) {\r\n        chart.svg().selectAll('.empty-message').remove()\r\n      } else {\r\n        empty.transition().duration(1000).style('opacity', 1)\r\n      }\r\n    },\r\n    // Make a Fake group to display only value above 0 on the row graphs\r\n    removeEmptyBins(group) {\r\n      return {\r\n        top(n) {\r\n          return group\r\n            .top(Infinity)\r\n            .filter(function(d) {\r\n              return d.value.count !== 0 && d.value !== 0\r\n            })\r\n            .slice(0, n)\r\n        },\r\n        all() {\r\n          return group.all()\r\n        }\r\n      }\r\n    },\r\n    createCumulativeGroup(sourceGroup) {\r\n      return {\r\n        all() {\r\n          let cumulate = 0\r\n          return sourceGroup.all().map(function(d) {\r\n            cumulate += d.value\r\n            return { key: d.key, value: cumulate }\r\n          })\r\n        }\r\n      }\r\n    },\r\n    changeAgg() {\r\n      if (this.checkbox) {\r\n        this.lineChart.group(this.createCumulativeGroup(this.timelineGroup))\r\n      } else {\r\n        this.lineChart.group(this.timelineGroup)\r\n      }\r\n      dc.redrawAll()\r\n    },\r\n    // Main function to init component\r\n    drawViz() {\r\n      // Init table values\r\n      this.results = this.values\r\n      // Format dates\r\n      const dateFormatParsers = this.dateFormats.map(d => d3.timeParse(d))\r\n      this.formatTimeDay = d3.timeFormat('%Y-%m-%d')\r\n      this.formatTimeMonth = d3.timeFormat('%B %Y')\r\n      this.formatTimeHour = d3.timeFormat('%H:%M:%S')\r\n      const formatTimeS = d3.timeFormat('%d %B %Y')\r\n      this.results.forEach((d) => {\r\n        d.dateSrc = d.date\r\n        dateFormatParsers.some((parser) => {\r\n          d.date = parser(d.dateSrc)\r\n          return d.date != null\r\n        })\r\n        d.dateStr = this.formatTimeDay(d.date)\r\n      })\r\n      // Build index for crossfiltering\r\n      const ndx = crossfilter(this.results)\r\n      const all = ndx.groupAll()\r\n      // Compute groupby Count for overview\r\n      const overviewDimension = ndx.dimension(d => [\r\n        d.eventSource,\r\n        d.eventType,\r\n        d.icon\r\n      ])\r\n      const overviewGroup = overviewDimension.group().reduceCount()\r\n      this.filterItems(overviewGroup)\r\n      this.total = all.value()\r\n      // Dimension to filter by source\r\n      this.activityDimension = ndx.dimension(d => d.eventSource)\r\n      // Update items on each change of crossfilter\r\n      ndx.onChange(() => {\r\n        this.filterItems(overviewGroup)\r\n        this.total = all.value()\r\n        this.results = ndx.allFiltered()\r\n        this.currMinDateStr = formatTimeS(this.minDate)\r\n        this.currMaxDateStr = formatTimeS(this.maxDate)\r\n      })\r\n      // Compute and draw line chart\r\n      this.lineChart = new dc.LineChart('#line-chart')\r\n      this.rangeChart = new dc.BarChart('#range-chart' + this.graphId)\r\n      this.timeDimension = ndx.dimension(d => d.date)\r\n      this.timelineGroup = this.timeDimension\r\n        .group(d => d3.timeMonth(d))\r\n        .reduceCount()\r\n      this.maxDate = this.timeDimension.top(1)[0].date\r\n      this.currMaxDateStr = formatTimeS(this.maxDate)\r\n      this.minDate = this.timeDimension.bottom(1)[0].date\r\n      this.currMinDateStr = formatTimeS(this.minDate)\r\n      const height = 240\r\n      this.lineChart\r\n        .renderArea(true)\r\n        .width(d3.select('#line-chart').node().getBoundingClientRect().width)\r\n        .height(height)\r\n        .transitionDuration(1000)\r\n        .margins({ top: 20, right: 20, bottom: 20, left: 50 })\r\n        .group(this.timelineGroup)\r\n        .dimension(this.timeDimension)\r\n        .curve(d3.curveMonotoneX)\r\n        .x(d3.scaleTime().domain([this.minDate, this.maxDate]))\r\n        .y(d3.scaleLinear())\r\n        .ordinalColors(['#58539E'])\r\n        .brushOn(false)\r\n        .elasticX(false)\r\n        .elasticY(true)\r\n        .xyTipsOn(true)\r\n        .mouseZoomable(false)\r\n        .rangeChart(this.rangeChart)\r\n        .renderHorizontalGridLines(false)\r\n        .clipPadding(10)\r\n        .title(d => this.formatTimeMonth(+d.key) + ': ' + d.value)\r\n        .yAxisLabel('')\r\n        .renderDataPoints({\r\n          radius: 3,\r\n          fillOpacity: 0.8,\r\n          strokeOpacity: 0\r\n        })\r\n        .xAxis()\r\n        .ticks(5)\r\n      this.rangeChart.on('filtered', () => {\r\n        const filters = this.timeDimension.currentFilter()\r\n        if (filters) {\r\n          this.currMinDateStr = formatTimeS(filters[0])\r\n          this.currMaxDateStr = formatTimeS(filters[1])\r\n        } else {\r\n          this.currMinDateStr = formatTimeS(this.minDate)\r\n          this.currMaxDateStr = formatTimeS(this.maxDate)\r\n        }\r\n      })\r\n      // Compute and draw range chart\r\n      this.rangeChart\r\n        .width(d3\r\n          .select('#range-chart' + this.graphId)\r\n          .node()\r\n          .getBoundingClientRect().width)\r\n        .height(40)\r\n        .margins({ top: 0, right: 20, bottom: 20, left: 50 })\r\n        .dimension(this.timeDimension)\r\n        .group(this.timelineGroup)\r\n        .centerBar(true)\r\n        .brushOn(false)\r\n        .gap(1)\r\n        .x(d3\r\n          .scaleTime()\r\n          .domain([this.minDate, d3.timeDay.offset(this.maxDate, 1)]))\r\n      // .round(d3.timeDay.round)\r\n      // .alwaysUseRounding(true)\r\n      // .xUnits(d3.timeDays)\r\n        .ordinalColors(['#58539E'])\r\n        .yAxis()\r\n        .ticks(0)\r\n      // Compute and draw row chart\r\n      const rowChart = new dc.RowChart('#row-chart')\r\n      const typeDimension = ndx.dimension(d => d.eventType)\r\n      const typeGroup = typeDimension.group().reduceCount()\r\n      const width = d3.select('#row-chart').node().getBoundingClientRect().width\r\n      rowChart\r\n        .width(width)\r\n        .height(height + 55)\r\n        .margins({ top: 20, left: 10, right: 30, bottom: 20 })\r\n        .group(this.removeEmptyBins(typeGroup))\r\n        .dimension(typeDimension)\r\n        .ordinalColors(['#58539E', '#847CEB', '#605BAB', '#4A4685', '#35325E'])\r\n        .label(d => d.key)\r\n        .data(group => group.top(10))\r\n        .title(d => d.value)\r\n        .elasticX(true)\r\n        .xAxis()\r\n        .ticks(4)\r\n      rowChart.on('pretransition', this.showEmptyMessage)\r\n      // Render all graphs\r\n      dc.renderAll()\r\n    },\r\n    filterTimeRange(newValue) {\r\n      if (this.rangeChart === null) {\r\n        return\r\n      }\r\n      this.rangeChart.filter(null)\r\n      let minDate = null\r\n      const maxDate = d3.timeDay.offset(this.maxDate, 1)\r\n      let dateFormat = null\r\n      switch (newValue) {\r\n        case 'ALL':\r\n          this.timelineGroup = this.timeDimension.group(d => d3.timeMonth(d))\r\n          dateFormat = this.formatTimeMonth\r\n          this.timeInterval = 'month'\r\n          break\r\n        case '1Y':\r\n          minDate = d3.max([d3.timeYear.offset(this.maxDate, -1), this.minDate])\r\n          this.timelineGroup = this.timeDimension.group(d => d3.timeMonth(d))\r\n          dateFormat = this.formatTimeMonth\r\n          this.timeInterval = 'month'\r\n          break\r\n        case '3M':\r\n          minDate = d3.max([\r\n            d3.timeMonth.offset(this.maxDate, -3),\r\n            this.minDate\r\n          ])\r\n          this.timelineGroup = this.timeDimension.group(d => d3.timeDay(d))\r\n          dateFormat = this.formatTimeDay\r\n          this.timeInterval = 'day'\r\n          break\r\n        case '1M':\r\n          minDate = d3.max([\r\n            d3.timeMonth.offset(this.maxDate, -1),\r\n            this.minDate\r\n          ])\r\n          this.timelineGroup = this.timeDimension.group(d => d3.timeDay(d))\r\n          dateFormat = this.formatTimeDay\r\n          this.timeInterval = 'day'\r\n          break\r\n        case '7D':\r\n          minDate = d3.max([d3.timeDay.offset(this.maxDate, -7), this.minDate])\r\n          this.timelineGroup = this.timeDimension.group(d => d3.timeDay(d))\r\n          dateFormat = this.formatTimeDay\r\n          this.timeInterval = 'day'\r\n          break\r\n        case '1D':\r\n          minDate = d3.max([d3.timeDay.offset(this.maxDate, -1), this.minDate])\r\n          this.timelineGroup = this.timeDimension.group(d => d3.timeHour(d))\r\n          dateFormat = this.formatTimeHour\r\n          this.timeInterval = 'hour'\r\n          break\r\n      }\r\n      if (minDate !== null) {\r\n        this.rangeChart.filter(dc.filters.RangedFilter(minDate, maxDate))\r\n      }\r\n      this.lineChart\r\n        .dimension(this.timeDimension)\r\n        .group(this.timelineGroup)\r\n        .title(d => dateFormat(+d.key) + ': ' + d.value)\r\n        .transitionDuration(1000)\r\n        .render()\r\n      dc.redrawAll()\r\n      /*\r\n            this.lineChart\r\n              .dimension()\r\n              .group(postsGroup)\r\n              .transitionDuration(1000)\r\n              .render()\r\n            */\r\n    },\r\n    filterItems(overviewGroup) {\r\n      const counts = overviewGroup.top(Infinity).reduce((p, c) => {\r\n        if (!Object.prototype.hasOwnProperty.call(p, c.key[0])) {\r\n          p[c.key[0]] = {}\r\n          p[c.key[0]].count = 0\r\n          p[c.key[0]].title = c.key[0]\r\n          p[c.key[0]].action = c.key[2]\r\n          p[c.key[0]].items = []\r\n        }\r\n        p[c.key[0]].count += c.value\r\n        if (c.value > 0) {\r\n          p[c.key[0]].items.push({ title: c.key[1], count: c.value })\r\n        }\r\n        return p\r\n      }, {})\r\n      this.items = Object.values(counts).filter(d => d.count > 0)\r\n    },\r\n    filterSource(title) {\r\n      this.currSourceFilter = title\r\n      this.activityDimension.filter(title)\r\n      dc.redrawAll()\r\n      this.tabDetails()\r\n    },\r\n    resetSourceFilter() {\r\n      this.currSourceFilter = null\r\n      this.activityDimension.filter(null)\r\n      dc.redrawAll()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n::v-deep .brush .custom-brush-handle {\r\n  display: auto;\r\n}\r\n</style>\r\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"","// extracted by mini-css-extract-plugin\nexport {};","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-55.use[0]!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-55.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-55.use[2]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewTimedObservationsViewer.vue?vue&type=style&index=0&id=5dfb5a74&prod&scoped=true&lang=css&\"","import { render, staticRenderFns } from \"./ChartViewTimedObservationsViewer.vue?vue&type=template&id=5dfb5a74&scoped=true&\"\nimport script from \"./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewTimedObservationsViewer.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ChartViewTimedObservationsViewer.vue?vue&type=style&index=0&id=5dfb5a74&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5dfb5a74\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VRow',_vm._b({ref:\"domToImageNode\"},'VRow',_vm.$attrs,false),[_vm._t(\"default\"),_c('VCol',{staticClass:\"dom-to-image-exclude\",attrs:{\"cols\":\"12\"}},[_c('BaseButton',_vm._b({attrs:{\"icon\":\"mdiExport\",\"text\":\"Export\"},on:{\"click\":_vm.exportImage}},'BaseButton',{ progress: _vm.progress, status: _vm.status, error: _vm.error },false)),_c('BaseButtonDownloadData',_vm._b({},'BaseButtonDownloadData',{ disabled: !_vm.blob, extension: _vm.extension, filename: _vm.filename, data: _vm.blob },false)),_c('BaseButtonShare',_vm._b({attrs:{\"file-share\":\"\"}},'BaseButtonShare',{ files: _vm.files, disabled: !_vm.files },false))],1)],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <VRow ref=\"domToImageNode\" v-bind=\"$attrs\">\r\n    <slot />\r\n    <VCol cols=\"12\" class=\"dom-to-image-exclude\">\r\n      <BaseButton\r\n        icon=\"mdiExport\"\r\n        text=\"Export\"\r\n        v-bind=\"{ progress, status, error }\"\r\n        @click=\"exportImage\"\r\n      />\r\n      <BaseButtonDownloadData\r\n        v-bind=\"{ disabled: !blob, extension, filename, data: blob }\"\r\n      />\r\n      <BaseButtonShare file-share v-bind=\"{ files, disabled: !files }\" />\r\n    </VCol>\r\n  </VRow>\r\n</template>\r\n\r\n<script>\r\nimport exportImageMixinFactory from '@/mixins/export-image-mixin-factory'\r\nimport BaseButton from '@/components/base/button/BaseButton.vue'\r\nimport BaseButtonDownloadData from '@/components/base/button/download/BaseButtonDownloadData.vue'\r\nimport BaseButtonShare from '@/components/base/button/BaseButtonShare.vue'\r\n\r\nexport default {\r\n  components: { BaseButton, BaseButtonDownloadData, BaseButtonShare },\r\n  mixins: [exportImageMixinFactory()]\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewVRowWebShare.vue?vue&type=template&id=53512c70&\"\nimport script from \"./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewVRowWebShare.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { TextFilterWidget } from 'dc'\r\nimport { merge } from 'lodash-es'\r\n\r\nimport kViewBlockMixin from '@/mixins/k-view-block'\r\n\r\nconst mixin = {\r\n  props: {\r\n    values: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    headers: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    messages: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      graphId: 'graph_' + this.$store.state.xp.currentTab,\r\n      totalCount: 0,\r\n      filterCount: 0\r\n    }\r\n  },\r\n  mounted() {\r\n    this.drawViz()\r\n  },\r\n  watch: {\r\n    values() {\r\n      this.drawViz()\r\n    }\r\n  },\r\n  methods: {\r\n    drawViz() { },\r\n    createTextFilterWidget(parent, placeholder = 'Search') {\r\n      const widget = new TextFilterWidget(parent)\r\n      widget.placeHolder(this.$tev(placeholder, placeholder))\r\n      return widget\r\n    }\r\n  }\r\n}\r\n\r\nexport default merge(mixin, kViewBlockMixin)\r\n"],"names":[],"sourceRoot":""}