{"version":3,"file":"data-experience.umd.9258.js","mappings":";;;;;;;;;;;AAAwB;AACxB;AACA;AACA,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,MAAM;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,iBAAiB,sCAAS;;AAE1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,GAAG;;AAEH;AACA","sources":["webpack://data-experience/./src/components/chart/view/utils/d3-helpers.js"],"sourcesContent":["import * as d3 from 'd3'\n/**\n * Fill in the missing dates of an array of dated objects with a specific value.\n * @param  {Array} data  array of objects that include dates\n * @param  {String} dateAccessor  the key of date object\n * @param  {String} valueAccessor the key of the value to add for each missing date\n * @param  {String} interval  the d3 interval between each date, e.g: d3.timeDay, d3.timeMonth\n * @param  {Any} fillValue  the value to fill for each missing date, default to 0.\n * @param  {Date} minDate  the starting date range, computed from the data by default.\n * @param  {Date} maxDate  the ending date range, computed from the data by default.\n * @return {Array} the modified data array with the missing dates and their value added\n */\nexport function addMissingDate(\n  data,\n  dateAccessor,\n  valueAccessor,\n  interval,\n  fillValue = 0,\n  minDate = null,\n  maxDate = null\n) {\n  if (data.length <= 0) { return [] }\n  // Compute the min and max date\n  const extent = d3.extent(data, d => new Date(d[dateAccessor]))\n\n  // Get the list of dates between this extent\n  const dates = interval.range(\n    minDate !== null ? interval.floor(minDate) : interval.floor(extent[0]),\n    maxDate !== null ? interval.ceil(maxDate) : interval.ceil(extent[1]),\n    1\n  )\n\n  // Get dates that are not in the above list\n  const missingDates = dates.filter(\n    value => !data.map(d => d[dateAccessor]).includes(value.toString())\n  )\n\n  // Add and fill missing dates\n  missingDates.forEach((date) => {\n    const obj = { ...data[0] }\n    obj[dateAccessor] = date\n    obj[valueAccessor] = fillValue\n    data.push(obj)\n  })\n\n  return data\n}\n"],"names":[],"sourceRoot":""}