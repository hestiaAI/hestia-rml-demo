{"version":3,"file":"DataExperience.common.5756.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,wBAAwB,qBAAqB,YAAY,aAAa,kBAAkB,mEAAmE,OAAO,mBAAmB,YAAY,GAAG,uCAAuC,QAAQ,gCAAgC,QAAQ,kBAAkB,YAAY,GAAG,YAAY,OAAO,kBAAkB,YAAY,QAAQ,mCAAmC,aAAa,gCAAgC,4BAA4B,6BAA6B,gBAAgB,4BAA4B,qBAAqB,EAAE,6BAA6B;AAC1pB;AACA;;;;;;;;;;;;;;;ACYwB;AACA;AAC6B;AAC1B;AACmC;AAC9D,mBAAO,CAAC,KAAqB;;AAE7B;AACA,uBAAuB,CAAC,gBAAe;;AAEvC,qEAAe;AACf,gCAAgC;AAChC,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;;AAEA;AACA,MAAM,UAAS;AACf;AACA,QAAQ,YAAY;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,UAAS;;AAE7B;AACA;AACA;AACA;AACA;AACA,8CAA8C,8BAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,YAAY;AAClB;AACA;AACA;AACA,CAAC;;;ACtJ4I,CAAC,wEAAe,gCAAG,EAAC;;ACAjK;;;;;;;AEAmG;AACvC;AACL;AACvD,CAAiG;;;AAGjG;AAC4G;AAC5G,gBAAgB,sCAAU;AAC1B,EAAE,mCAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAAe;;;;;;;;;;;;;;;;ACnBf,+BAA+B,6BAA6B,eAAe,sBAAsB,yEAAyE,qBAAqB,YAAY,aAAa,4DAA4D,mCAAmC,kBAAkB;AACzU;AACA;;;;;ACSA,6EAAe;;AAEf,CAAC;;;ACboJ,CAAC,qFAAe,wCAAG,EAAC;;;;ACA1E;AAC3B;AACL;;;AAG/D;AACA,CAA4G;AAC5G,gBAAgB,sCAAU;AAC1B,EAAE,gDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAe;;;;;;;;;AClBsB;AACrC;AACA,+DAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,yBAAyB,gDAAgB;AACzC;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;AC9ED;AACwB;AACA;AACxB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,IAAI,6DAA6D;AACjE,sCAAsC;AACtC,WAAW,QAAQ;AACnB;AACA,aAAa,cAAc;AAC3B;AACA,yCAAY;AACZ;AACA;AACA,sBAAsB,wCAAW,CAAC,2CAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0CAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sCAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2CAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0CAAa;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAA4C;AACpD;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe,SAAS;AACxB,iBAAiB,qBAAqB,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAAE;AACnB;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAsD;AAC9D;AACA;AACA;AACA,aAAa;AACb,eAAe,UAAU;AACzB,iBAAiB,uBAAuB,sBAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,sBAAsB,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjLwB;AACA;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,iBAAiB;AACjB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,mBAAmB,sCAAS;AAC5B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,UAAU,sDAAyB;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH","sources":["webpack://@hestia.ai/data-experience/./src/components/chart/view/dc/TopChart.vue?392d","webpack://@hestia.ai/data-experience/src/components/chart/view/dc/TopChart.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/dc/TopChart.vue?b9f6","webpack://@hestia.ai/data-experience/./src/components/chart/view/dc/TopChart.vue?7a79","webpack://@hestia.ai/data-experience/./src/components/chart/view/dc/TopChart.vue?5071","webpack://@hestia.ai/data-experience/./src/components/chart/view/dc/TopChart.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/filters/ChartViewFilters.vue?cff0","webpack://@hestia.ai/data-experience/src/components/chart/view/filters/ChartViewFilters.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/filters/ChartViewFilters.vue?e912","webpack://@hestia.ai/data-experience/./src/components/chart/view/filters/ChartViewFilters.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/dc/mixin.js","webpack://@hestia.ai/data-experience/./src/components/chart/view/utils/dc-axis.js","webpack://@hestia.ai/data-experience/./src/components/chart/view/utils/dc-helpers.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',{style:(_vm.cssProps)},[_c('div',{staticStyle:{\"display\":\"flex\"}},[_c('strong',[_vm._v(_vm._s(_vm.title))]),_c('VSpacer'),_c('div',{attrs:{\"id\":`top-search-${_vm.graphId}`}})],1),_c('ChartViewFilters'),_c('div',{class:{ isScrollable: _vm.isScrollable },attrs:{\"id\":`top-chart-${_vm.graphId}`}}),_c('div',{attrs:{\"id\":`top-chart-${_vm.graphId}-axis`}}),(_vm.topK < _vm.total)?_c('div',{directives:[{name:\"t\",rawName:\"v-t\",value:({ path: 'show-top-n', args: { n: _vm.topK, m: _vm.total } }),expression:\"{ path: 'show-top-n', args: { n: topK, m: total } }\"}],staticClass:\"text-caption\"}):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <VContainer :style=\"cssProps\">\r\n    <div style=\"display: flex\">\r\n        <strong>{{ title }}</strong>\r\n        <VSpacer />\r\n        <div :id=\"`top-search-${graphId}`\" />\r\n    </div>\r\n    <ChartViewFilters />\r\n    <div :id=\"`top-chart-${graphId}`\" :class=\"{ isScrollable }\"></div>\r\n    <div :id=\"`top-chart-${graphId}-axis`\"></div>\r\n    <div v-if=\"topK < total\" class=\"text-caption\" v-t=\"{ path: 'show-top-n', args: { n: topK, m: total } }\"></div>\r\n  </VContainer>\r\n</template>\r\n<script>\r\nimport * as d3 from 'd3'\r\nimport * as dc from 'dc'\r\nimport { removeEmptyBins } from '../utils/dc-helpers'\r\nimport mixin from './mixin'\r\nimport ChartViewFilters from '../filters/ChartViewFilters.vue'\r\nrequire('../utils/dc-axis.js')\r\n\r\n// Remove warning on default colorscheme, even if not used..\r\ndc.config.defaultColors(d3.schemePaired)\r\n\r\nexport default {\r\n  components: { ChartViewFilters },\r\n  mixins: [mixin],\r\n  props: {\r\n    /**\r\n     * Column name of the {values} to be displayed/compared in the graph\r\n     */\r\n    valueAccessor: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    /**\r\n     * Whether or not each value should be considered as an array\r\n     * eg here col2 should be considered and an array:\r\n     * [ { col1: \"test\", col2: [\"test1\", \"test2\"] }, ... ]\r\n     */\r\n    valueAsArray: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * If defined, calculates the sum of the column named {sumAccessor} over {valueAccessor}.\r\n     * Otherwise, takes the count of the unique {valueAccessor}.\r\n     */\r\n    sumAccessor: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Number of bars to display in descendant order\r\n     */\r\n    topK: {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    /**\r\n     * Define if the chart should be scrollable to see all values\r\n     */\r\n    isScrollable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * If one of {valueAccessor} is null, replace the value with a default\r\n     */\r\n    defaultValue: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      total: 'N/A'\r\n    }\r\n  },\r\n  computed: {\r\n    cssProps() {\r\n      return {\r\n        '--height': (this.height + 6.5) + 'px'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    drawViz() {\r\n      // Init top row chart & search\r\n      const topChart = new dc.RowChart(`#top-chart-${this.graphId}`)\r\n      const topSearch = this.createTextFilterWidget(`#top-search-${this.graphId}`)\r\n\r\n      // Bind reset filters link\r\n      d3.select(`#top-chart-${this.graphId} a.reset`).on('click', function() {\r\n        topChart.filterAll()\r\n        dc.redrawAll()\r\n      })\r\n\r\n      // Create dimensions\r\n      const topDimension = this.ndx.dimension((d) => {\r\n        if (this.valueAsArray) {\r\n          return JSON.parse(d[this.valueAccessor]) || [this.defaultValue]\r\n        } else {\r\n          return d[this.valueAccessor] || this.defaultValue\r\n        }\r\n      }, this.valueAsArray)\r\n\r\n      topSearch.dimension(this.ndx.dimension((d) => {\r\n        if (this.valueAsArray) {\r\n          return JSON.parse(d[this.valueAccessor].toLowerCase()) || [this.defaultValue.toLowerCase()]\r\n        } else {\r\n          return (d[this.valueAccessor] || this.defaultValue).toLowerCase()\r\n        }\r\n      }, this.valueAsArray))\r\n\r\n      // Create group\r\n      const topGroup = this.sumAccessor ? topDimension.group().reduceSum(d => d[this.sumAccessor]) : topDimension.group().reduceCount()\r\n      this.total = topGroup.size()\r\n      const height = this.isScrollable ? Math.max(Math.min(this.topK, topGroup.size()) * 20, this.height) : this.height\r\n      const width = d3.select(`#top-chart-${this.graphId}`).node().getBoundingClientRect().width\r\n\r\n      // Create top row chart\r\n      topChart\r\n        .width(width)\r\n        .height(height)\r\n        .margins({ top: 20, left: 10, right: 10, bottom: -5 })\r\n        .group(this.isScrollable ? topGroup : removeEmptyBins(topGroup))\r\n        .dimension(topDimension)\r\n        .ordinalColors([this.colorPalette[this.position % this.colorPalette.length]])\r\n        .label(d => d.key)\r\n        .data(group => group.top(this.topK))\r\n        .title(d => `${d.value} ${this.valueLabel}`)\r\n        .elasticX(true)\r\n        .xAxis()\r\n        .ticks(4)\r\n\r\n      dc.axisChart(`#top-chart-${this.graphId}-axis`)\r\n        .margins({ top: 0, left: 10, right: 10, bottom: 10 })\r\n        .height(20)\r\n        .width(width)\r\n        .dimension(topDimension)\r\n        .group(topGroup)\r\n        .elastic(true)\r\n        .axis()\r\n        .ticks(4)\r\n\r\n      dc.renderAll()\r\n      // addXLabel(topChart, this.valueLabel)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n::v-deep .dc-text-filter-input {\r\n  background: none;\r\n  color: #596471;\r\n  border-bottom: 1px solid #596471;\r\n  outline: none;\r\n}\r\n.isScrollable {\r\n  overflow-y: auto;\r\n  height: var(--height);\r\n}\r\n</style>\r\n","import mod from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TopChart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TopChart.vue?vue&type=script&lang=js&\"","// extracted by mini-css-extract-plugin\nexport {};","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TopChart.vue?vue&type=style&index=0&id=c8af34f6&prod&scoped=true&lang=css&\"","import { render, staticRenderFns } from \"./TopChart.vue?vue&type=template&id=c8af34f6&scoped=true&\"\nimport script from \"./TopChart.vue?vue&type=script&lang=js&\"\nexport * from \"./TopChart.vue?vue&type=script&lang=js&\"\nimport style0 from \"./TopChart.vue?vue&type=style&index=0&id=c8af34f6&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"c8af34f6\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('p',{staticClass:\"filters\"},[_c('span',[_vm._v(\" \"+_vm._s(_vm.$t('Current filter'))+\" \"),_c('span',{staticClass:\"filter\"})]),_c('a',{directives:[{name:\"t\",rawName:\"v-t\",value:('reset'),expression:\"'reset'\"}],staticClass:\"reset\",staticStyle:{\"display\":\"none\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <p class=\"filters\">\r\n    <span>\r\n      {{ $t('Current filter') }}\r\n      <span class=\"filter\" />\r\n    </span>\r\n    <a v-t=\"'reset'\" class=\"reset\" style=\"display: none\" />\r\n  </p>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\r\n}\r\n</script>\r\n","import mod from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewFilters.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewFilters.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewFilters.vue?vue&type=template&id=2f9280d1&\"\nimport script from \"./ChartViewFilters.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewFilters.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { TextFilterWidget } from 'dc'\r\n\r\nexport default {\r\n  props: {\r\n    /**\r\n     * The crossfilter object that contains the values and filters\r\n     * e,g: crossfilter(this.results)\r\n     */\r\n    ndx: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    /**\r\n     * Title of the graph\r\n     */\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    /**\r\n     * Label to display in the axis\r\n     */\r\n    valueLabel: {\r\n      type: String,\r\n      default: 'records'\r\n    },\r\n    /**\r\n     * The height of the graph\r\n     * the width is dynamically computed from it's parent\r\n     */\r\n    height: {\r\n      type: Number,\r\n      default: 250\r\n    },\r\n    /**\r\n     * Position of the graph in the dashboard\r\n     * Determine the color to pick in colorPalette\r\n     */\r\n    position: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    /**\r\n     * Colors to use in the graph\r\n     * Default to Set 3: https://observablehq.com/@d3/color-schemes\r\n     */\r\n    colorPalette: {\r\n      type: Array,\r\n      default: () => ['#bebada', '#8dd3c7', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#bc80bd', '#ccebc5']\r\n    }\r\n    /**\r\n     '#58539E',\r\n        '#847CEB',\r\n        '#605BAB',\r\n        '#4A4685',\r\n        '#35325E'\r\n     */\r\n  },\r\n  data() {\r\n    return {\r\n      graphId: 'graph_' + this._uid\r\n    }\r\n  },\r\n  mounted() {\r\n    this.drawViz()\r\n  },\r\n  watch: {\r\n    values() {\r\n      this.drawViz()\r\n    }\r\n  },\r\n  methods: {\r\n    createTextFilterWidget(parent, placeholder = 'Search') {\r\n      const widget = new TextFilterWidget(parent)\r\n      widget.placeHolder(this.$t(placeholder))\r\n      return widget\r\n    }\r\n  }\r\n}\r\n","/* eslint-disable no-import-assign */\r\nimport * as d3 from 'd3'\r\nimport * as dc from 'dc'\r\n/**\r\n * Separate axis implementation.\r\n * by @ialarmedalien\r\n * Source / Author: https://gist.github.com/gordonwoodhull/13689975c3ec069a4e0bef380846157b\r\n * Examples:\r\n * - {@link https://bl.ocks.org/ialarmedalien/0a4bf25ffc0fb96ae569a20f91957bc1 eslint on dc.js source}\r\n * @class axisChart\r\n * @memberof dc\r\n * @mixes dc.capMixin\r\n * @mixes dc.marginMixin\r\n * @mixes dc.baseMixin\r\n * @example\r\n * // create an axis under #chart-container1 element using the default global chart group\r\n * var chart1 = dc.axisChart('#chart-container1');\r\n * // create an axis under #chart-container2 element using chart group A\r\n * var chart2 = dc.axisChart('#chart-container2', 'chartGroupA');\r\n * @param {String|node|d3.selection} parent - Any valid\r\n * {@link https://github.com/d3/d3-selection d3 single selector} specifying\r\n * a dom block element such as a div; or a dom element or d3 selection.\r\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\r\n * Interaction with a chart will only trigger events and redraws within the chart's group.\r\n * @returns {dc.axisChart} a dc axis chart\r\n */\r\ndc.axisChart = function(parent, chartGroup) {\r\n  let _g\r\n\r\n  const _chart = new (dc.CapMixin(dc.MarginMixin))()\r\n\r\n  let _scale\r\n\r\n  let _elastic\r\n\r\n  let _type\r\n\r\n  let _theAxis = d3.axisBottom()\r\n\r\n  let _axisData\r\n\r\n  const validAxisTypes = ['axisBottom', 'axisTop', 'axisLeft', 'axisRight']\r\n\r\n  _chart.axisCap = _chart.cap\r\n\r\n  function calculateAxisScale() {\r\n    if (!_scale || _elastic) {\r\n      const extent = d3.extent(_axisData, d => _chart.cappedValueAccessor(d))\r\n      if (extent[0] > 0) {\r\n        extent[0] = 0\r\n      }\r\n      if (extent[1] < 0) {\r\n        extent[1] = 0\r\n      }\r\n      _scale = d3.scaleLinear().domain(extent)\r\n        .range([0, _chart.effectiveWidth()])\r\n    }\r\n    _theAxis.scale(_scale)\r\n  }\r\n\r\n  function drawAxis() {\r\n    let axisG = _g.select('g.axis')\r\n\r\n    calculateAxisScale()\r\n\r\n    if (axisG.empty()) {\r\n      axisG = _g.append('g').attr('class', 'axis')\r\n    }\r\n\r\n    dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\r\n      .call(_theAxis)\r\n  }\r\n\r\n  _chart._doRender = function() {\r\n    _chart.resetSvg()\r\n\r\n    _g = _chart.svg()\r\n      .append('g')\r\n      .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\r\n\r\n    drawChart()\r\n\r\n    return _chart\r\n  }\r\n\r\n  /**\r\n     * Gets or sets the axis type. The axis type can be any valid\r\n     * {@link https://github.com/d3/d3-axis d3 axis}. The default is\r\n     * axisBottom (a bottom axis).\r\n     * @method type\r\n     * @memberof dc.axisChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-axis d3 axis}\r\n     * @param {d3.type} [type]\r\n     * @returns {string|dc.axisChart} no args: type string; args: axis chart\r\n     */\r\n\r\n  _chart.type = function(type) {\r\n    if (!arguments.length) {\r\n      return _type\r\n    }\r\n    // set the axis type here\r\n    if (validAxisTypes.indexOf(type) !== -1) {\r\n      _theAxis = d3[type]()\r\n      _type = type\r\n    } else {\r\n      console.error(type + ' is not a valid d3 axis type')\r\n    }\r\n\r\n    return _chart\r\n  }\r\n\r\n  /**\r\n     * Gets or sets the axis scale. The axis scale can be any d3\r\n     * {@link https://github.com/d3/d3-scale quantitive scale}.\r\n     * @method scale\r\n     * @memberof dc.axisChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-scale quantitive scale}\r\n     * @param {d3.scale} [scale] any value d3 scale\r\n     * @returns {d3.scale|dc.axisChart} no args: chart scale; args: axis chart\r\n     */\r\n  _chart.scale = function(scale) {\r\n    if (!arguments.length) {\r\n      return _scale\r\n    }\r\n    _scale = scale\r\n    return _chart\r\n  }\r\n\r\n  /**\r\n     * Get or set the elasticity on the axis. If this attribute is set to true,\r\n     * then the axis will rescale to auto-fit the data range when filtered.\r\n     * @method elastic\r\n     * @memberof dc.axisChart\r\n     * @instance\r\n     * @param {Boolean} [elastic] any valid boolean\r\n     * @returns {Boolean|dc.axisChart} no args: boolean; args: axis chart\r\n     */\r\n  _chart.elastic = function(elastic) {\r\n    if (!arguments.length) {\r\n      return _elastic\r\n    }\r\n    _elastic = elastic\r\n    return _chart\r\n  }\r\n\r\n  /**\r\n     * Get the axis for the axis chart instance.\r\n     * See the {@link https://github.com/d3/d3-axis d3 axis object}\r\n     * documention for more information.\r\n     * @method axis\r\n     * @memberof dc.axisChart\r\n     * @instance\r\n     * @see {@link https://github.com/d3/d3-axis d3.axis}\r\n     * @example\r\n     * // customize axis tick format\r\n     * chart.axis().tickFormat(function (v) {return v + '%';});\r\n     * // customize axis tick values\r\n     * chart.axis().tickValues([0, 100, 200, 300]);\r\n     * @returns {d3.axis} d3 axis\r\n     */\r\n  _chart.axis = function() {\r\n    return _theAxis\r\n  }\r\n\r\n  function drawChart() {\r\n    _axisData = _chart.data()\r\n    drawAxis()\r\n  }\r\n\r\n  _chart._doRedraw = function() {\r\n    drawChart()\r\n    return _chart\r\n  }\r\n\r\n  return _chart.anchor(parent, chartGroup)\r\n}\r\n","import * as d3 from 'd3'\r\nimport * as dc from 'dc'\r\n\r\n// Functions to add x-label & y-label to Row Charts (Unsupported by dc.js)\r\n// https://www.intothevoid.io/data-visualization/row-chart-axis-labels-dc-js/\r\n// Use with:\r\n// contentChart.on('postRender', function (chart) {\r\n//  addXLabel(chart, 'Hours watched')\r\n// })\r\nexport function addXLabel(chartToUpdate, displayText) {\r\n  const textSelection = chartToUpdate\r\n    .svg()\r\n    .append('text')\r\n    .attr('class', 'x-axis-label')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('x', chartToUpdate.width() / 2)\r\n    .attr('y', chartToUpdate.height() - 10)\r\n    .text(displayText)\r\n  const textDims = textSelection.node().getBBox()\r\n  const chartMargins = chartToUpdate.margins()\r\n\r\n  // Dynamically adjust positioning after reading text dimension from DOM\r\n  textSelection\r\n    .attr(\r\n      'x',\r\n      chartMargins.left +\r\n        (chartToUpdate.width() - chartMargins.left - chartMargins.right) / 2\r\n    )\r\n    .attr('y', chartToUpdate.height() - Math.ceil(textDims.height) / 2)\r\n}\r\nexport function addYLabel(chartToUpdate, displayText) {\r\n  const textSelection = chartToUpdate\r\n    .svg()\r\n    .append('text')\r\n    .attr('class', 'y-axis-label')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('transform', 'rotate(-90)')\r\n    .attr('x', -chartToUpdate.height() / 2)\r\n    .attr('y', 10)\r\n    .text(displayText)\r\n  const textDims = textSelection.node().getBBox()\r\n  const chartMargins = chartToUpdate.margins()\r\n\r\n  // Dynamically adjust positioning after reading text dimension from DOM\r\n  textSelection\r\n    .attr(\r\n      'x',\r\n      -chartMargins.top -\r\n        (chartToUpdate.height() - chartMargins.top - chartMargins.bottom) / 2\r\n    )\r\n    .attr(\r\n      'y',\r\n      Math.max(\r\n        Math.ceil(textDims.height),\r\n        chartMargins.left - Math.ceil(textDims.height) - 5\r\n      )\r\n    )\r\n}\r\n\r\n/**\r\n * Transform a simple group to a cumulative one in order\r\n * to make cumulative line chart\r\n * @param {Crossfilter group} group the group to transform\r\n * @returns the cumulative group\r\n */\r\nexport function createCumulativeGroup(group) {\r\n  return {\r\n    all() {\r\n      const cumulate = {}\r\n      return group.all().map(function(d) {\r\n        if (cumulate[d.key[0]]) {\r\n          cumulate[d.key[0]] += d.value\r\n        } else {\r\n          cumulate[d.key[0]] = d.value\r\n        }\r\n        return { key: d.key, value: cumulate[d.key[0]] }\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Remove datapoints that are null in a crossfilter group\r\n * Used to hide empty bins in a bar graph\r\n * @param {Crossfilter group} group the group to transform\r\n * @returns the cleaned group\r\n */\r\nexport function removeEmptyBins(group) {\r\n  return {\r\n    top(n) {\r\n      return group\r\n        .top(Infinity)\r\n        .filter(function(d) {\r\n          return d.value.count !== 0 && d.value !== 0\r\n        })\r\n        .slice(0, n)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addPiePercentage(chart) {\r\n  chart.selectAll('text.pie-slice.pie-label').call(function(t) {\r\n    t.each(function(d) {\r\n      const self = d3.select(this)\r\n      let text = self.text()\r\n      if (text.length > 14) { text = text.substring(0, 14) + '.. ' }\r\n      if (text.length > 0) {\r\n        text =\r\n          text +\r\n          ' (' +\r\n          dc.utils.printSingleValue(\r\n            ((d.endAngle - d.startAngle) / (2 * Math.PI)) * 100\r\n          ) +\r\n          '%)'\r\n      }\r\n      self.text(text)\r\n    })\r\n  })\r\n}\r\n"],"names":[],"sourceRoot":""}