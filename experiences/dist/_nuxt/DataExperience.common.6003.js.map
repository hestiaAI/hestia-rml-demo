{"version":3,"file":"DataExperience.common.6003.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,qEAAqE,OAAO,aAAa,gBAAgB,OAAO,sDAAsD,QAAQ,mDAAmD,sBAAsB,6BAA6B,yCAAyC,OAAO,aAAa,UAAU,8BAA8B,8hBAA8hB,OAAO,aAAa,UAAU,8BAA8B,6GAA6G,OAAO,uBAAuB;AAC1pC;AACA;;;;;;;;;;;;ACF4C;AACT;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,sCAAsC;AACjD;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA,OAAO,6BAA6B;AACpC,OAAO,6BAA6B;AACpC,OAAO,6BAA6B;AACpC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,0BAAO;AACd;AACA;AACA;AACA,OAAO,0BAAO;AACd;AACA;AACA,SAAS,+BAAW;AACpB;;AAEA,sDAAe,OAAO,EAAC;;;;;;;;ACT6B;AACzB;AAC8B;;AAEzD,oFAAe;AACf,0BAA0B;AAC1B,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0BAAO;AAC7B;AACA,aAAa,iBAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0BAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;ACtLwJ,CAAC,yFAAe,+CAAG,EAAC;;;;ACAvE;AAC3B;AACL;;;AAGtE;AACA,CAAyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,oDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAAe","sources":["webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewGoogleOnePlace.vue?a7d0","webpack://@hestia.ai/data-experience/./node_modules/lodash-es/orderBy.js","webpack://@hestia.ai/data-experience/src/components/chart/view/ChartViewGoogleOnePlace.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewGoogleOnePlace.vue?4db0","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewGoogleOnePlace.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('VRow',[(_vm.placeName === '')?_c('VCol',{attrs:{\"cols\":\"12\"}},[_c('VSelect',{attrs:{\"items\":_vm.listOfNames,\"label\":_vm.messages['Place']},model:{value:(_vm.placeSelected),callback:function ($$v) {_vm.placeSelected=$$v},expression:\"placeSelected\"}})],1):_vm._e()],1),_c('VRow',[_c('VCol',{attrs:{\"cols\":\"12\"}},[_c('p',{staticClass:\"text-subtitle-2\"},[_vm._v(\" \"+_vm._s(_vm.messages['total-time-spent'])+\" \"+_vm._s(_vm.placeSelected)+\": \"+_vm._s(_vm.total_time)+\". \"),_c('br'),_c('br'),_vm._v(\" \"+_vm._s(_vm.messages['mean-time-spent'])+\" \"+_vm._s(_vm.placeSelected)+\": \"+_vm._s(_vm.mean_time)+\". \"),_c('br'),_c('br'),_vm._v(\" \"+_vm._s(_vm.messages['entropy'])+\" \"+_vm._s(_vm.placeSelected)+\": \"+_vm._s(_vm.computeEntropy())+\". \"),_c('br'),_vm._v(\" \"+_vm._s(_vm.messages['entropy-info'])+\" \"+_vm._s(_vm.placeSelected)+\". \")])])],1),(_vm.getFilteredList().length !== 0)?[_c('VRow',[_c('VCol',{attrs:{\"cols\":\"12\"}},[_c('p',{staticClass:\"text-subtitle-2\"},[_vm._v(\" \"+_vm._s(_vm.messages['other-candidates'])+\" \"+_vm._s(_vm.placeSelected)+\": \")]),_c('UnitKepler',{attrs:{\"args\":_vm.keplerArgs}})],1)],1)]:_vm._e()],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import baseOrderBy from './_baseOrderBy.js';\nimport isArray from './isArray.js';\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nexport default orderBy;\n","<template>\n  <VContainer>\n    <VRow>\n      <VCol v-if=\"placeName === ''\" cols=\"12\">\n        <VSelect\n          v-model=\"placeSelected\"\n          :items=\"listOfNames\"\n          :label=\"messages['Place']\"\n        />\n      </VCol>\n    </VRow>\n    <VRow>\n      <VCol cols=\"12\">\n        <p class=\"text-subtitle-2\">\n          {{ messages['total-time-spent'] }} {{ placeSelected }}: {{ total_time }}. <br>\n          <br>\n          {{ messages['mean-time-spent'] }} {{ placeSelected }}: {{ mean_time }}. <br>\n          <br>\n          {{ messages['entropy'] }} {{ placeSelected }}: {{ computeEntropy() }}. <br>\n          {{ messages['entropy-info'] }} {{ placeSelected }}.\n        </p>\n      </VCol>\n    </VRow>\n    <template v-if=\"getFilteredList().length !== 0\">\n      <VRow>\n        <VCol cols=\"12\">\n          <p class=\"text-subtitle-2\">\n            {{ messages['other-candidates'] }} {{ placeSelected }}:\n          </p>\n          <UnitKepler :args=\"keplerArgs\" />\n        </VCol>\n      </VRow>\n    </template>\n  </VContainer>\n</template>\n\n<script>\nimport { uniqBy, groupBy, orderBy } from 'lodash-es'\nimport mixin from './mixin'\nimport UnitKepler from '@/components/unit/UnitKepler.vue'\n\nexport default {\n  components: { UnitKepler },\n  mixins: [mixin],\n  props: {\n    keplerConfig: {\n      type: Object,\n      default: () => null\n    },\n    placeName: {\n      type: String,\n      default: () => ''\n    }\n  },\n  data() {\n    return {\n      listOfNames: this.getOrderedList(),\n      placeSelected: this.getSelectedName()\n    }\n  },\n  computed: {\n    total() {\n      return this.values.length\n    },\n    total_time() {\n      const durations = this.get_durations()\n      const sum = durations.reduce((a, b) => a + b, 0)\n      return this.convertHMS(sum)\n    },\n    mean_time() {\n      const durations = this.get_durations()\n      const sum = durations.reduce((a, b) => a + b, 0)\n      const avg = sum / durations.length || 0\n      return this.convertHMS(avg)\n    },\n    associated_names() {\n      const table = this.values.filter(x => x.winnerName === this.placeSelected)\n      const uniq = uniqBy(table, x => x.loserName)\n      const names = uniq.map((v) => {\n        return {\n          name: v.loserName,\n          latitude: v.loserLatitude,\n          longitude: v.loserLongitude,\n          confidence: v.loserConfidence\n        }\n      })\n      return names\n    },\n    keplerData() {\n      const headers = Object.keys(this.associated_names[0])\n      return {\n        fields: headers.map((h) => {\n          return {\n            name: this.messages?.keplerFields?.[h] || h\n          }\n        }),\n        rows: this.associated_names.map(r => headers.map(h => r[h]))\n      }\n    },\n    keplerArgs() {\n      return {\n        keplerData: this.keplerData,\n        config: this.keplerConfig\n      }\n    }\n  },\n  methods: {\n    getSelectedName() {\n      const list = this.getOrderedList()\n      if (this.placeName !== '') {\n        return this.placeName\n      } else {\n        return list[0]\n      }\n    },\n    getOrderedList() {\n      const grouped = groupBy(this.values, 'winnerName')\n      let list = Object.keys(grouped).map((x) => { return { winnerName: x, count: grouped[x].length } })\n      list = orderBy(list, 'count', 'desc').map(x => x.winnerName)\n      return list\n    },\n    getFilteredList() {\n      return this.values.filter(x => x.winnerName === this.placeSelected)\n    },\n    compute_duration(d1, d2) {\n      const date1 = new Date(d1).getTime()\n      const date2 = new Date(d2).getTime()\n      const res = Math.floor(Math.abs(date1 - date2) / 1000)\n      return res\n    },\n    get_durations() {\n      const values = this.values.filter(x => x.winnerName === this.placeSelected)\n      const table = values.map(x => [x.startTimestamp, x.endTimestamp])\n      const uniq = uniqBy(table, x => x[0])\n      const dur = uniq.map(v => this.compute_duration(v[0], v[1]))\n      return dur\n    },\n    computeEntropy() {\n      const list = this.getProbababilities()\n      let res = 0\n      for (let i = 0; i < list.length; i++) {\n        let sum = 0\n        for (let j = 0; j < list[i].length; j++) {\n          sum += list[i][j] * Math.log2(list[i][j])\n        }\n        res += -sum\n      }\n      return (res / list.length).toPrecision(4)\n    },\n    getProbababilities() {\n      const list = this.getFilteredList()\n      const grouped = groupBy(list, x => x.startTimestamp)\n      const keys = Object.keys(grouped)\n      const res = []\n      for (let i = 0; i < keys.length; i++) {\n        const elem = grouped[keys[i]]\n        const arr = [elem[0].winnerConfidence / 100]\n        for (let j = 0; j < elem.length; j++) {\n          arr.push(elem[j].loserConfidence / 100)\n        }\n        res.push(arr)\n      }\n      return res\n    },\n    convertHMS(value) {\n      const sec = Math.round(value)\n      let hours = Math.floor(sec / 3600) // get hours\n      let minutes = Math.floor((sec - hours * 3600) / 60) // get minutes\n      let seconds = sec - hours * 3600 - minutes * 60 //  get seconds\n      // add 0 if value < 10; Example: 2 => 02\n      if (hours < 10) {\n        hours = '0' + hours\n      }\n      if (minutes < 10) {\n        minutes = '0' + minutes\n      }\n      if (seconds < 10) {\n        seconds = '0' + seconds\n      }\n      return hours + 'h' + minutes + 'm' + seconds + 's' // Return is HH : MM : SS\n    }\n  }\n}\n</script>\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewGoogleOnePlace.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewGoogleOnePlace.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartViewGoogleOnePlace.vue?vue&type=template&id=400c75c4&\"\nimport script from \"./ChartViewGoogleOnePlace.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewGoogleOnePlace.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":[],"sourceRoot":""}