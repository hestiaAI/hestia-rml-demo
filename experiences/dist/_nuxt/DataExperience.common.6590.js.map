{"version":3,"file":"DataExperience.common.6590.js","mappings":";;;;;;;;;;;;;;;AAAA,+BAA+B,6BAA6B,wDAAwD,aAAa,gCAAgC,kDAAkD,wBAAwB,gBAAgB,8CAA8C,oBAAoB,EAAE,yBAAyB,0CAA0C,aAAa,gCAAgC,gDAAgD,wBAAwB,gBAAgB,4CAA4C,oBAAoB,EAAE,yBAAyB,+CAA+C,0BAA0B,qHAAqH,sBAAsB,sBAAsB,8BAA8B,aAAa,EAAE,gCAAgC,mBAAmB,gFAAgF,iCAAiC,kGAAkG,UAAU,wDAAwD,2BAA2B,kCAAkC,sBAAsB,0BAA0B,0HAA0H,sBAAsB,sBAAsB,8BAA8B,aAAa,EAAE,gCAAgC,mBAAmB,gFAAgF,iCAAiC,kGAAkG,UAAU,wDAAwD,2BAA2B,kCAAkC,iBAAiB,mBAAmB,4CAA4C,kBAAkB,eAAe,iDAAiD,cAAc,wCAAwC,iBAAiB,mBAAmB,mEAAmE,0EAA0E,+BAA+B,YAAY,8BAA8B,uCAAuC,2BAA2B,gMAAgM,yDAAyD,YAAY,UAAU,gDAAgD,0BAA0B,0BAA0B,6BAA6B,wDAAwD;AACl2F;AACA;;;;;;;;;ACqF2B;AACqC;;AAEhE;AACA,MAAM,qEAAgC;AACtC,QAAQ,wCAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2FAAe;AACf,WAAW,gBAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iCAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AC7K+J,CAAC,gGAAe,sDAAG,EAAC;;ACApL;;;;;;;AEA6G;AAC3B;AACL;AAC7E,CAA2G;;;AAG3G;AACyG;AACzG,gBAAgB,sCAAU;AAC1B,EAAE,2DAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,mEAAe","sources":["webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewListLinkedinInference.vue?34f1","webpack://@hestia.ai/data-experience/src/components/chart/view/ChartViewListLinkedinInference.vue","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewListLinkedinInference.vue?7699","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewListLinkedinInference.vue?6d33","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewListLinkedinInference.vue?33bb","webpack://@hestia.ai/data-experience/./src/components/chart/view/ChartViewListLinkedinInference.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('VContainer',[_c('VRow',[_c('div',[_c('span',{directives:[{name:\"t\",rawName:\"v-t\",value:({ path: _vm.kViewBlock('total-inferences'), args: { n: _vm.values.length } }),expression:\"{ path: kViewBlock('total-inferences'), args: { n: values.length } }\"}],staticClass:\"overline\"}),_c('br'),(_vm.totalProfiles)?_c('span',{directives:[{name:\"t\",rawName:\"v-t\",value:({ path: _vm.kViewBlock('total-profiles'), args: { n: _vm.totalProfiles } }),expression:\"{ path: kViewBlock('total-profiles'), args: { n: totalProfiles } }\"}],staticClass:\"overline\"}):_vm._e()]),_c('VSpacer'),_c('VAutocomplete',{staticClass:\"pa-4\",attrs:{\"multiple\":\"\",\"chips\":\"\",\"dense\":\"\",\"label\":_vm.messages['Filter by Category'],\"items\":_vm.categories,\"menu-props\":{ closeOnClick: false }},scopedSlots:_vm._u([{key:\"selection\",fn:function({ item, index }){return [(index < 3)?_c('VChip',{staticClass:\"ma-1\"},[_c('span',[_vm._v(\" \"+_vm._s(item)+\" \")])]):_vm._e(),(index === 3)?_c('span',{staticClass:\"grey--text caption\"},[_vm._v(\" (\"+_vm._s(_vm.$tc('plusXOther', _vm.categoriesSelected.length - 3))+\") \")]):_vm._e()]}}]),model:{value:(_vm.categoriesSelected),callback:function ($$v) {_vm.categoriesSelected=$$v},expression:\"categoriesSelected\"}}),_c('VAutocomplete',{staticClass:\"pa-4\",attrs:{\"multiple\":\"\",\"chips\":\"\",\"dense\":\"\",\"label\":_vm.messages['Filter by Inference'],\"items\":_vm.inferenceTypes,\"menu-props\":{ closeOnClick: false }},scopedSlots:_vm._u([{key:\"selection\",fn:function({ item, index }){return [(index < 3)?_c('VChip',{staticClass:\"ma-1\"},[_c('span',[_vm._v(\" \"+_vm._s(item)+\" \")])]):_vm._e(),(index === 3)?_c('span',{staticClass:\"grey--text caption\"},[_vm._v(\" (\"+_vm._s(_vm.$tc('plusXOther', _vm.inferencesSelected.length - 3))+\") \")]):_vm._e()]}}]),model:{value:(_vm.inferencesSelected),callback:function ($$v) {_vm.inferencesSelected=$$v},expression:\"inferencesSelected\"}})],1),_c('VRow',{staticClass:\"ma-6\"},_vm._l((_vm.itemsFiltered),function(i,idx){return _c('VCol',{key:idx,attrs:{\"cols\":\"12\",\"sm\":\"6\",\"md\":\"4\",\"lg\":\"3\",\"xl\":\"2\"}},[_c('VCard',{staticClass:\"d-flex flex-column\",attrs:{\"height\":\"100%\"}},[_c('VCardTitle',{staticClass:\"d-flex flex-nowrap align-start justify-space-between\"},[_c('div',[_vm._v(_vm._s(i.typeOfInference))]),('_count' in i)?_c('div',{staticClass:\"text-center ml-2\"},[_c('div',{staticClass:\"text-subtitle-2\"},[_vm._v(_vm._s(i._count))]),_c('div',{staticClass:\"text-caption\"},[_vm._v(_vm._s(_vm.$tc('profile', i._count)))])]):_vm._e()]),_c('VCardSubtitle',[_vm._v(_vm._s(i.category))]),_c('VCardText',[_vm._v(_vm._s(i.description))]),_c('VSpacer'),_c('VCardActions',{staticClass:\"ma-3 overline d-flex justify-space-between\"},[_c('div',{domProps:{\"textContent\":_vm._s(_vm.messages['Inferred'])}}),_c('div',[_c('VAvatar',{staticClass:\"mr-1\",attrs:{\"size\":\"16\",\"color\":i.color}}),_vm._v(\" \"+_vm._s(i.inferenceText)+\" \")],1)])],1)],1)}),1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <VContainer>\r\n    <VRow>\r\n      <div>\r\n        <span v-t=\"{ path: kViewBlock('total-inferences'), args: { n: values.length } }\" class=\"overline\" />\r\n        <br>\r\n        <span v-if=\"totalProfiles\" v-t=\"{ path: kViewBlock('total-profiles'), args: { n: totalProfiles } }\" class=\"overline\" />\r\n      </div>\r\n      <VSpacer />\r\n      <VAutocomplete\r\n        v-model=\"categoriesSelected\"\r\n        multiple\r\n        chips\r\n        dense\r\n        class=\"pa-4\"\r\n        :label=\"messages['Filter by Category']\"\r\n        :items=\"categories\"\r\n        :menu-props=\"{ closeOnClick: false }\"\r\n      >\r\n        <template #selection=\"{ item, index }\">\r\n          <VChip v-if=\"index < 3\" class=\"ma-1\">\r\n            <span>\r\n              {{ item }}\r\n            </span>\r\n          </VChip>\r\n          <span v-if=\"index === 3\" class=\"grey--text caption\">\r\n            ({{ $tc('plusXOther', categoriesSelected.length - 3) }})\r\n          </span>\r\n        </template>\r\n      </VAutocomplete>\r\n      <VAutocomplete\r\n        v-model=\"inferencesSelected\"\r\n        multiple\r\n        chips\r\n        dense\r\n        class=\"pa-4\"\r\n        :label=\"messages['Filter by Inference']\"\r\n        :items=\"inferenceTypes\"\r\n        :menu-props=\"{ closeOnClick: false }\"\r\n      >\r\n        <template #selection=\"{ item, index }\">\r\n          <VChip v-if=\"index < 3\" class=\"ma-1\">\r\n            <span>\r\n              {{ item }}\r\n            </span>\r\n          </VChip>\r\n          <span v-if=\"index === 3\" class=\"grey--text caption\">\r\n            ({{ $tc('plusXOther', inferencesSelected.length - 3) }})\r\n          </span>\r\n        </template>\r\n      </VAutocomplete>\r\n    </VRow>\r\n    <VRow class=\"ma-6\">\r\n      <VCol\r\n        v-for=\"(i, idx) in itemsFiltered\"\r\n        :key=\"idx\"\r\n        cols=\"12\"\r\n        sm=\"6\"\r\n        md=\"4\"\r\n        lg=\"3\"\r\n        xl=\"2\"\r\n      >\r\n        <VCard height=\"100%\" class=\"d-flex flex-column\">\r\n          <VCardTitle class=\"d-flex flex-nowrap align-start justify-space-between\">\r\n            <div>{{ i.typeOfInference }}</div>\r\n            <div class=\"text-center ml-2\" v-if=\"'_count' in i\">\r\n              <div class=\"text-subtitle-2\">{{ i._count }}</div>\r\n              <div class=\"text-caption\">{{ $tc('profile', i._count) }}</div>\r\n            </div>\r\n          </VCardTitle>\r\n          <VCardSubtitle>{{ i.category }}</VCardSubtitle>\r\n          <VCardText>{{ i.description }}</VCardText>\r\n          <VSpacer />\r\n          <VCardActions class=\"ma-3 overline d-flex justify-space-between\">\r\n            <div v-text=\"messages['Inferred']\" />\r\n            <div>\r\n              <VAvatar size=\"16\" :color=\"i.color\" class=\"mr-1\" />\r\n              {{ i.inferenceText }}\r\n            </div>\r\n          </VCardActions>\r\n        </VCard>\r\n      </VCol>\r\n    </VRow>\r\n  </VContainer>\r\n</template>\r\n\r\n<script>\r\nimport mixin from './mixin'\r\nimport { TYPE_FORMATTER, TRUE_VALUES } from '@/utils/type-check'\r\n\r\nconst getColor = (v) => {\r\n  if (TYPE_FORMATTER.BOOLEAN.validator(v)) {\r\n    if (TRUE_VALUES.test(v)) {\r\n      // true\r\n      return '#29AA24'\r\n    }\r\n    // false\r\n    return '#E52229'\r\n  }\r\n  // other\r\n  return '#F2F2F2'\r\n}\r\n\r\nexport default {\r\n  mixins: [mixin],\r\n  props: {\r\n    messages: {\r\n      type: Object,\r\n      default: () => {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    const { BOOLEAN, FLOAT } = TYPE_FORMATTER\r\n    const items = this.values.map(({ inference: v, category, ...rest }) => {\r\n      // by default, the type is 'Other' and the value is unchanged\r\n      let inferenceType = 'Other'\r\n      let inferenceText = v\r\n      if (BOOLEAN.validator(v)) {\r\n        // the boolean formatter takes care of i18n localization\r\n        inferenceText = BOOLEAN.formatter(v, this)\r\n        inferenceType = inferenceText\r\n      } else if (FLOAT.validator(v)) {\r\n        inferenceText = FLOAT.formatter(v).toFixed(2)\r\n        inferenceType = 'Numeric value'\r\n      }\r\n      return {\r\n        inference: v,\r\n        category: this.$tev(this.kViewBlock(category, 'categories'), category),\r\n        inferenceText,\r\n        inferenceType: this.$tev(\r\n          // Keys sourced from view-block dictionary\r\n          this.kViewBlock(inferenceType, 'inferenceTypes'),\r\n          // Yes/No is already translated\r\n          inferenceType\r\n        ),\r\n        color: getColor(v),\r\n        ...rest\r\n      }\r\n    })\r\n    return {\r\n      items,\r\n      categoriesSelected: [],\r\n      inferencesSelected: [],\r\n      categories: items.map(i => i.category),\r\n      inferenceTypes: items.map(i => i.inferenceType)\r\n    }\r\n  },\r\n  computed: {\r\n    totalProfiles() {\r\n      if (this.values.length && this.values[0]._total_profiles) {\r\n        return this.values[0]._total_profiles\r\n      } else {\r\n        return 0\r\n      }\r\n    },\r\n    itemsFiltered() {\r\n      const { categoriesSelected: cs, inferencesSelected: is } = this\r\n      return this.items\r\n        .filter(\r\n          ({ category, inferenceType }) =>\r\n            (\r\n              !cs.length ||\r\n              cs.includes(category)\r\n            ) &&\r\n            (\r\n              !is.length ||\r\n              is.includes(inferenceType)\r\n            )\r\n        )\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.v-card__text,\r\n.v-card__title {\r\n  word-break: normal; /* maybe !important  */\r\n}\r\n</style>\r\n","import mod from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"","// extracted by mini-css-extract-plugin\nexport {};","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??clonedRuleSet-12.use[0]!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChartViewListLinkedinInference.vue?vue&type=style&index=0&id=367b94c8&prod&lang=css&\"","import { render, staticRenderFns } from \"./ChartViewListLinkedinInference.vue?vue&type=template&id=367b94c8&\"\nimport script from \"./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartViewListLinkedinInference.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ChartViewListLinkedinInference.vue?vue&type=style&index=0&id=367b94c8&prod&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":[],"sourceRoot":""}